
First_Test_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007138  08007138  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007138  08007138  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007138  08007138  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000088  080071c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080071c8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae75  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  0002af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d32  00000000  00000000  0002e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e802  00000000  00000000  0004744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000886d3  00000000  00000000  00055c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de31f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000de370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e80 	.word	0x08006e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006e80 	.word	0x08006e80

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
 800065e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fd5e 	bl	8001120 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t  Counter = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
  uint16_t  Ana_Vol = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	f8a7 34ea 	strh.w	r3, [r7, #1258]	; 0x4ea
  uint16_t  Ana_Vol2 = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8a7 34e8 	strh.w	r3, [r7, #1256]	; 0x4e8

  uint16_t  Vol = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f8a7 34e6 	strh.w	r3, [r7, #1254]	; 0x4e6
  uint16_t  Cur = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
  uint16_t  TempE = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	f8a7 34e2 	strh.w	r3, [r7, #1250]	; 0x4e2
  uint16_t  TempI = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	f8a7 34e0 	strh.w	r3, [r7, #1248]	; 0x4e0
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f9cb 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fab9 	bl	8000c08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000696:	f000 fa17 	bl	8000ac8 <MX_ADC1_Init>
  MX_SPI2_Init();
 800069a:	f000 fa7f 	bl	8000b9c <MX_SPI2_Init>
  MX_FATFS_Init();
 800069e:	f002 fd23 	bl	80030e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80006a2:	48cb      	ldr	r0, [pc, #812]	; (80009d0 <main+0x378>)
 80006a4:	f000 fbce 	bl	8000e44 <myprintf>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fd9a 	bl	80011e4 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

	//Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80006b0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80006b4:	2201      	movs	r2, #1
 80006b6:	49c7      	ldr	r1, [pc, #796]	; (80009d4 <main+0x37c>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 f8ab 	bl	8005814 <f_mount>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  if (fres != FR_OK) {
 80006c4:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d007      	beq.n	80006dc <main+0x84>
  myprintf("f_mount error (%i)\r\n", fres);
 80006cc:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80006d0:	4619      	mov	r1, r3
 80006d2:	48c1      	ldr	r0, [pc, #772]	; (80009d8 <main+0x380>)
 80006d4:	f000 fbb6 	bl	8000e44 <myprintf>
  Error_Handler();
 80006d8:	f000 fbd0 	bl	8000e7c <Error_Handler>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 80006dc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80006e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006e4:	4619      	mov	r1, r3
 80006e6:	48bb      	ldr	r0, [pc, #748]	; (80009d4 <main+0x37c>)
 80006e8:	f005 fdbc 	bl	8006264 <f_getfree>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  if (fres != FR_OK) {
 80006f2:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <main+0xb2>
  myprintf("f_getfree error (%i)\r\n", fres);
 80006fa:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80006fe:	4619      	mov	r1, r3
 8000700:	48b6      	ldr	r0, [pc, #728]	; (80009dc <main+0x384>)
 8000702:	f000 fb9f 	bl	8000e44 <myprintf>
  Error_Handler();
 8000706:	f000 fbb9 	bl	8000e7c <Error_Handler>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800070a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800070e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000718:	3b02      	subs	r3, #2
 800071a:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800071e:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
  free_sectors = free_clusters * getFreeFs->csize;
 8000730:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8000734:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800073e:	461a      	mov	r2, r3
 8000740:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8000744:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000752:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000756:	0859      	lsrs	r1, r3, #1
 8000758:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	461a      	mov	r2, r3
 8000760:	489f      	ldr	r0, [pc, #636]	; (80009e0 <main+0x388>)
 8000762:	f000 fb6f 	bl	8000e44 <myprintf>


  BYTE WriteBuf[100];

    //open Data.csv file" FA_CREATE_ALWAYS,FA_OPEN_ALWAYS
  fres = f_open(&fil, "Data.csv", FA_WRITE | FA_CREATE_ALWAYS|FA_OPEN_ALWAYS);
 8000766:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800076a:	221a      	movs	r2, #26
 800076c:	499d      	ldr	r1, [pc, #628]	; (80009e4 <main+0x38c>)
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f898 	bl	80058a4 <f_open>
 8000774:	4603      	mov	r3, r0
 8000776:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  if(fres == FR_OK) {
 800077a:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <main+0x132>
  myprintf("I was able to open 'Data.csv' for writing\r\n");
 8000782:	4899      	ldr	r0, [pc, #612]	; (80009e8 <main+0x390>)
 8000784:	f000 fb5e 	bl	8000e44 <myprintf>
 8000788:	e007      	b.n	800079a <main+0x142>
  } else {
  myprintf("f_open error (%i)\r\n", fres);
 800078a:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 800078e:	4619      	mov	r1, r3
 8000790:	4896      	ldr	r0, [pc, #600]	; (80009ec <main+0x394>)
 8000792:	f000 fb57 	bl	8000e44 <myprintf>
  Error_Handler();
 8000796:	f000 fb71 	bl	8000e7c <Error_Handler>
  }

  //(char*)WriteBuf
  sprintf(WriteBuf,"Counter,Voltage,Current,Bat Temp,Ambient Temp\r\n");
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4994      	ldr	r1, [pc, #592]	; (80009f0 <main+0x398>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f005 feb9 	bl	8006518 <siprintf>
  UINT bytesWrote;
  fres = f_write(&fil, WriteBuf, 47, &bytesWrote);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	f107 010c 	add.w	r1, r7, #12
 80007ae:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80007b2:	222f      	movs	r2, #47	; 0x2f
 80007b4:	f005 faef 	bl	8005d96 <f_write>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  if(fres == FR_OK) {
 80007be:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d109      	bne.n	80007da <main+0x182>
  myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007c6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80007ca:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4888      	ldr	r0, [pc, #544]	; (80009f4 <main+0x39c>)
 80007d4:	f000 fb36 	bl	8000e44 <myprintf>
 80007d8:	e004      	b.n	80007e4 <main+0x18c>
  } else {
  myprintf("f_write error (%i)\r\n");
 80007da:	4887      	ldr	r0, [pc, #540]	; (80009f8 <main+0x3a0>)
 80007dc:	f000 fb32 	bl	8000e44 <myprintf>
  Error_Handler();
 80007e0:	f000 fb4c 	bl	8000e7c <Error_Handler>

  while (1)
  {

	//Read battery Voltage
	select_ch10();
 80007e4:	f000 fad8 	bl	8000d98 <select_ch10>
	HAL_ADC_Start(&hadc1);
 80007e8:	4884      	ldr	r0, [pc, #528]	; (80009fc <main+0x3a4>)
 80007ea:	f000 fdf7 	bl	80013dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80007ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f2:	4882      	ldr	r0, [pc, #520]	; (80009fc <main+0x3a4>)
 80007f4:	f000 fecc 	bl	8001590 <HAL_ADC_PollForConversion>
	Ana_Vol = HAL_ADC_GetValue(&hadc1);
 80007f8:	4880      	ldr	r0, [pc, #512]	; (80009fc <main+0x3a4>)
 80007fa:	f000 ffcf 	bl	800179c <HAL_ADC_GetValue>
 80007fe:	4603      	mov	r3, r0
 8000800:	f8a7 34ea 	strh.w	r3, [r7, #1258]	; 0x4ea
	Vol =(uint16_t)MAP(Ana_Vol, 22256, 34912, 20000, 30000);
 8000804:	f8b7 34ea 	ldrh.w	r3, [r7, #1258]	; 0x4ea
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd5d 	bl	80002c8 <__aeabi_ui2f>
 800080e:	4b7c      	ldr	r3, [pc, #496]	; (8000a00 <main+0x3a8>)
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <main+0x3ac>)
 8000814:	4a7c      	ldr	r2, [pc, #496]	; (8000a08 <main+0x3b0>)
 8000816:	497d      	ldr	r1, [pc, #500]	; (8000a0c <main+0x3b4>)
 8000818:	f000 fa92 	bl	8000d40 <MAP>
 800081c:	4603      	mov	r3, r0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fefa 	bl	8000618 <__aeabi_f2uiz>
 8000824:	4603      	mov	r3, r0
 8000826:	f8a7 34e6 	strh.w	r3, [r7, #1254]	; 0x4e6
	HAL_ADC_Stop(&hadc1);
 800082a:	4874      	ldr	r0, [pc, #464]	; (80009fc <main+0x3a4>)
 800082c:	f000 fe84 	bl	8001538 <HAL_ADC_Stop>
	HAL_Delay(200);
 8000830:	20c8      	movs	r0, #200	; 0xc8
 8000832:	f000 fcd7 	bl	80011e4 <HAL_Delay>

	//Read battery Current
	select_ch11();
 8000836:	f000 facd 	bl	8000dd4 <select_ch11>
	HAL_ADC_Start(&hadc1);
 800083a:	4870      	ldr	r0, [pc, #448]	; (80009fc <main+0x3a4>)
 800083c:	f000 fdce 	bl	80013dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000844:	486d      	ldr	r0, [pc, #436]	; (80009fc <main+0x3a4>)
 8000846:	f000 fea3 	bl	8001590 <HAL_ADC_PollForConversion>
	Ana_Vol = HAL_ADC_GetValue(&hadc1)-12000;
 800084a:	486c      	ldr	r0, [pc, #432]	; (80009fc <main+0x3a4>)
 800084c:	f000 ffa6 	bl	800179c <HAL_ADC_GetValue>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8000858:	3b20      	subs	r3, #32
 800085a:	f8a7 34ea 	strh.w	r3, [r7, #1258]	; 0x4ea
	Cur = (uint16_t)MAP(Ana_Vol, 22320, 26144, 2000, 5000);
 800085e:	f8b7 34ea 	ldrh.w	r3, [r7, #1258]	; 0x4ea
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fd30 	bl	80002c8 <__aeabi_ui2f>
 8000868:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <main+0x3b8>)
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <main+0x3bc>)
 800086e:	4a6a      	ldr	r2, [pc, #424]	; (8000a18 <main+0x3c0>)
 8000870:	496a      	ldr	r1, [pc, #424]	; (8000a1c <main+0x3c4>)
 8000872:	f000 fa65 	bl	8000d40 <MAP>
 8000876:	4603      	mov	r3, r0
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fecd 	bl	8000618 <__aeabi_f2uiz>
 800087e:	4603      	mov	r3, r0
 8000880:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
	HAL_ADC_Stop(&hadc1);
 8000884:	485d      	ldr	r0, [pc, #372]	; (80009fc <main+0x3a4>)
 8000886:	f000 fe57 	bl	8001538 <HAL_ADC_Stop>
	HAL_Delay(200);
 800088a:	20c8      	movs	r0, #200	; 0xc8
 800088c:	f000 fcaa 	bl	80011e4 <HAL_Delay>

	//Read battery temperature
	select_ch11();
 8000890:	f000 faa0 	bl	8000dd4 <select_ch11>
	HAL_ADC_Start(&hadc1);
 8000894:	4859      	ldr	r0, [pc, #356]	; (80009fc <main+0x3a4>)
 8000896:	f000 fda1 	bl	80013dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800089a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800089e:	4857      	ldr	r0, [pc, #348]	; (80009fc <main+0x3a4>)
 80008a0:	f000 fe76 	bl	8001590 <HAL_ADC_PollForConversion>
	Ana_Vol = HAL_ADC_GetValue(&hadc1);
 80008a4:	4855      	ldr	r0, [pc, #340]	; (80009fc <main+0x3a4>)
 80008a6:	f000 ff79 	bl	800179c <HAL_ADC_GetValue>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f8a7 34ea 	strh.w	r3, [r7, #1258]	; 0x4ea
	TempE =(uint16_t) MAP(Ana_Vol, 0, 16,  0, 1);
 80008b0:	f8b7 34ea 	ldrh.w	r3, [r7, #1258]	; 0x4ea
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd07 	bl	80002c8 <__aeabi_ui2f>
 80008ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80008c8:	f04f 0100 	mov.w	r1, #0
 80008cc:	f000 fa38 	bl	8000d40 <MAP>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea0 	bl	8000618 <__aeabi_f2uiz>
 80008d8:	4603      	mov	r3, r0
 80008da:	f8a7 34e2 	strh.w	r3, [r7, #1250]	; 0x4e2
	HAL_ADC_Stop(&hadc1);
 80008de:	4847      	ldr	r0, [pc, #284]	; (80009fc <main+0x3a4>)
 80008e0:	f000 fe2a 	bl	8001538 <HAL_ADC_Stop>
	HAL_Delay(200);
 80008e4:	20c8      	movs	r0, #200	; 0xc8
 80008e6:	f000 fc7d 	bl	80011e4 <HAL_Delay>

	//Read ambient temperature
	select_ch12();
 80008ea:	f000 fa8f 	bl	8000e0c <select_ch12>
	HAL_ADC_Start(&hadc1);
 80008ee:	4843      	ldr	r0, [pc, #268]	; (80009fc <main+0x3a4>)
 80008f0:	f000 fd74 	bl	80013dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80008f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f8:	4840      	ldr	r0, [pc, #256]	; (80009fc <main+0x3a4>)
 80008fa:	f000 fe49 	bl	8001590 <HAL_ADC_PollForConversion>
	Ana_Vol = HAL_ADC_GetValue(&hadc1);
 80008fe:	483f      	ldr	r0, [pc, #252]	; (80009fc <main+0x3a4>)
 8000900:	f000 ff4c 	bl	800179c <HAL_ADC_GetValue>
 8000904:	4603      	mov	r3, r0
 8000906:	f8a7 34ea 	strh.w	r3, [r7, #1258]	; 0x4ea
	TempI =(uint16_t) MAP(Ana_Vol, 0, 16,  0, 1);
 800090a:	f8b7 34ea 	ldrh.w	r3, [r7, #1258]	; 0x4ea
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fcda 	bl	80002c8 <__aeabi_ui2f>
 8000914:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000922:	f04f 0100 	mov.w	r1, #0
 8000926:	f000 fa0b 	bl	8000d40 <MAP>
 800092a:	4603      	mov	r3, r0
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe73 	bl	8000618 <__aeabi_f2uiz>
 8000932:	4603      	mov	r3, r0
 8000934:	f8a7 34e0 	strh.w	r3, [r7, #1248]	; 0x4e0
	HAL_ADC_Stop(&hadc1);
 8000938:	4830      	ldr	r0, [pc, #192]	; (80009fc <main+0x3a4>)
 800093a:	f000 fdfd 	bl	8001538 <HAL_ADC_Stop>
	HAL_Delay(200);
 800093e:	20c8      	movs	r0, #200	; 0xc8
 8000940:	f000 fc50 	bl	80011e4 <HAL_Delay>


	//Copy in a string
	//(char*)WriteBuf
	sprintf((char*)WriteBuf,"%05d,%05d,%05d,%05d,%05d\r\n",Counter,Vol,Cur,TempI,TempE);
 8000944:	f8b7 44e6 	ldrh.w	r4, [r7, #1254]	; 0x4e6
 8000948:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 800094c:	f8b7 24e0 	ldrh.w	r2, [r7, #1248]	; 0x4e0
 8000950:	f8b7 14e2 	ldrh.w	r1, [r7, #1250]	; 0x4e2
 8000954:	f107 000c 	add.w	r0, r7, #12
 8000958:	9102      	str	r1, [sp, #8]
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	4623      	mov	r3, r4
 8000960:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8000964:	492e      	ldr	r1, [pc, #184]	; (8000a20 <main+0x3c8>)
 8000966:	f005 fdd7 	bl	8006518 <siprintf>
	UINT bytesWrote;
	fres = f_write(&fil, WriteBuf, 30, &bytesWrote);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	f107 010c 	add.w	r1, r7, #12
 8000970:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000974:	221e      	movs	r2, #30
 8000976:	f005 fa0e 	bl	8005d96 <f_write>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	if(fres == FR_OK) {
 8000980:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 8000984:	2b00      	cmp	r3, #0
 8000986:	d109      	bne.n	800099c <main+0x344>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000988:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800098c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <main+0x39c>)
 8000996:	f000 fa55 	bl	8000e44 <myprintf>
 800099a:	e004      	b.n	80009a6 <main+0x34e>
	} else {
	myprintf("f_write error (%i)\r\n");
 800099c:	4816      	ldr	r0, [pc, #88]	; (80009f8 <main+0x3a0>)
 800099e:	f000 fa51 	bl	8000e44 <myprintf>
	Error_Handler();
 80009a2:	f000 fa6b 	bl	8000e7c <Error_Handler>
	}

    f_sync(&fil);
 80009a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fba0 	bl	80060f0 <f_sync>
	Counter++;
 80009b0:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80009b4:	3301      	adds	r3, #1
 80009b6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 80009ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <main+0x3cc>)
 80009c0:	f001 fb0c 	bl	8001fdc <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f000 fc0c 	bl	80011e4 <HAL_Delay>
  {
 80009cc:	e70a      	b.n	80007e4 <main+0x18c>
 80009ce:	bf00      	nop
 80009d0:	08006e98 	.word	0x08006e98
 80009d4:	08006eb8 	.word	0x08006eb8
 80009d8:	08006ebc 	.word	0x08006ebc
 80009dc:	08006ed4 	.word	0x08006ed4
 80009e0:	08006eec 	.word	0x08006eec
 80009e4:	08006f34 	.word	0x08006f34
 80009e8:	08006f40 	.word	0x08006f40
 80009ec:	08006f6c 	.word	0x08006f6c
 80009f0:	08006f80 	.word	0x08006f80
 80009f4:	08006fb0 	.word	0x08006fb0
 80009f8:	08006fd4 	.word	0x08006fd4
 80009fc:	200000a4 	.word	0x200000a4
 8000a00:	46ea6000 	.word	0x46ea6000
 8000a04:	469c4000 	.word	0x469c4000
 8000a08:	47086000 	.word	0x47086000
 8000a0c:	46ade000 	.word	0x46ade000
 8000a10:	459c4000 	.word	0x459c4000
 8000a14:	44fa0000 	.word	0x44fa0000
 8000a18:	46cc4000 	.word	0x46cc4000
 8000a1c:	46ae6000 	.word	0x46ae6000
 8000a20:	08006fec 	.word	0x08006fec
 8000a24:	40011400 	.word	0x40011400

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	2228      	movs	r2, #40	; 0x28
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fd66 	bl	8006508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	2310      	movs	r3, #16
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 faf3 	bl	8002058 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a78:	f000 fa00 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fd60 	bl	800255c <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aa2:	f000 f9eb 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fed7 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000abc:	f000 f9de 	bl	8000e7c <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <MX_ADC1_Init+0xd0>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000af4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b0a:	f000 fb8f 	bl	800122c <HAL_ADC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 8000b14:	f000 f9b2 	bl	8000e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b18:	230a      	movs	r3, #10
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000b20:	2306      	movs	r3, #6
 8000b22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b2a:	f000 fe43 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 f9a2 	bl	8000e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b46:	f000 fe35 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f994 	bl	8000e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b54:	230c      	movs	r3, #12
 8000b56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b62:	f000 fe27 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000b6c:	f000 f986 	bl	8000e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b70:	230d      	movs	r3, #13
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_ADC1_Init+0xcc>)
 8000b7e:	f000 fe19 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000b88:	f000 f978 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	40012400 	.word	0x40012400

08000b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_SPI2_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bd0:	2230      	movs	r2, #48	; 0x30
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bee:	f001 ffaf 	bl	8002b50 <HAL_SPI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 f940 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000d4 	.word	0x200000d4
 8000c04:	40003800 	.word	0x40003800

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a37      	ldr	r2, [pc, #220]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0320 	and.w	r3, r3, #32
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c82:	482c      	ldr	r0, [pc, #176]	; (8000d34 <MX_GPIO_Init+0x12c>)
 8000c84:	f001 f992 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sd_cs_GPIO_Port, sd_cs_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8e:	482a      	ldr	r0, [pc, #168]	; (8000d38 <MX_GPIO_Init+0x130>)
 8000c90:	f001 f98c 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c94:	2308      	movs	r3, #8
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4825      	ldr	r0, [pc, #148]	; (8000d3c <MX_GPIO_Init+0x134>)
 8000ca8:	f000 fffc 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481b      	ldr	r0, [pc, #108]	; (8000d34 <MX_GPIO_Init+0x12c>)
 8000cc6:	f000 ffed 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000cca:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <MX_GPIO_Init+0x130>)
 8000ce0:	f000 ffe0 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : sd_cs_Pin */
  GPIO_InitStruct.Pin = sd_cs_Pin;
 8000ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sd_cs_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <MX_GPIO_Init+0x130>)
 8000cfe:	f000 ffd1 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_GPIO_Init+0x12c>)
 8000d16:	f000 ffc5 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configures the port and pin on which the EVENTOUT Cortex signal will be connected */
  HAL_GPIOEx_ConfigEventout(AFIO_EVENTOUT_PORT_A, AFIO_EVENTOUT_PIN_3);
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f001 f977 	bl	8002010 <HAL_GPIOEx_ConfigEventout>

  /*Enables the Event Output */
  HAL_GPIOEx_EnableEventout();
 8000d22:	f001 f98b 	bl	800203c <HAL_GPIOEx_EnableEventout>

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <MAP>:

/* USER CODE BEGIN 4 */
float MAP(float in_v,float Min_Ana_Val,float Max_Ana_Val,float Min_Dig_Val,float Max_Dig_Val)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
	return (((in_v - Min_Ana_Val)*(Max_Dig_Val - Min_Dig_Val))/(Max_Ana_Val - Min_Ana_Val))+ Min_Dig_Val;
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fa07 	bl	8000164 <__aeabi_fsub>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461c      	mov	r4, r3
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fa01 	bl	8000164 <__aeabi_fsub>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4619      	mov	r1, r3
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff fb06 	bl	8000378 <__aeabi_fmul>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461c      	mov	r4, r3
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff f9f6 	bl	8000164 <__aeabi_fsub>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff fbaf 	bl	80004e0 <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9ee 	bl	8000168 <__addsf3>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
	...

08000d98 <select_ch10>:

static void select_ch10(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_10;
 8000da8:	230a      	movs	r3, #10
 8000daa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <select_ch10+0x38>)
 8000dba:	f000 fcfb 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <select_ch10+0x30>
	{
	Error_Handler();
 8000dc4:	f000 f85a 	bl	8000e7c <Error_Handler>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000a4 	.word	0x200000a4

08000dd4 <select_ch11>:

static void select_ch11(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_11;
 8000de4:	230b      	movs	r3, #11
 8000de6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <select_ch11+0x34>)
 8000df2:	f000 fcdf 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <select_ch11+0x2c>
	{
	Error_Handler();
 8000dfc:	f000 f83e 	bl	8000e7c <Error_Handler>
	}
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000a4 	.word	0x200000a4

08000e0c <select_ch12>:
static void select_ch12(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_12;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <select_ch12+0x34>)
 8000e2a:	f000 fcc3 	bl	80017b4 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <select_ch12+0x2c>
	  {
	    Error_Handler();
 8000e34:	f000 f822 	bl	8000e7c <Error_Handler>
	  }

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000a4 	.word	0x200000a4

08000e44 <myprintf>:
	  {
	    Error_Handler();
	  }
}

void myprintf(const char *fmt, ...) {
 8000e44:	b40f      	push	{r0, r1, r2, r3}
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <myprintf+0x34>)
 8000e5c:	f005 fba8 	bl	80065b0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <myprintf+0x34>)
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr
 8000e78:	2000012c 	.word	0x2000012c

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <Error_Handler+0x18>)
 8000e88:	f001 f890 	bl	8001fac <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x14>
 8000e92:	bf00      	nop
 8000e94:	40011400 	.word	0x40011400

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_ADC_MspInit+0x6c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d121      	bne.n	8000f60 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_ADC_MspInit+0x70>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_ADC_MspInit+0x74>)
 8000f5c:	f000 fea2 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40012400 	.word	0x40012400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40011000 	.word	0x40011000

08000f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_SPI_MspInit+0x8c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d131      	bne.n	8000ff8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	61d3      	str	r3, [r2, #28]
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_SPI_MspInit+0x90>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000fc4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_SPI_MspInit+0x94>)
 8000fda:	f000 fe63 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_SPI_MspInit+0x94>)
 8000ff4:	f000 fe56 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40003800 	.word	0x40003800
 8001004:	40021000 	.word	0x40021000
 8001008:	40010c00 	.word	0x40010c00

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f8ab 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f005 fa12 	bl	80064b4 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20005000 	.word	0x20005000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	2000022c 	.word	0x2000022c
 80010c4:	20000288 	.word	0x20000288

080010c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff ffe5 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f005 f9df 	bl	80064c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff faa9 	bl	8000658 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001110:	08007140 	.word	0x08007140
  ldr r2, =_sbss
 8001114:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001118:	20000284 	.word	0x20000284

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x28>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 fd83 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff feac 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fd8d 	bl	8001c8a <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 fd63 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000230 	.word	0x20000230

080011d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	20000230 	.word	0x20000230

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff fff0 	bl	80011d0 <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffe0 	bl	80011d0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0be      	b.n	80013cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fe46 	bl	8000efc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fbf1 	bl	8001a58 <ADC_ConversionStop_Disable>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8099 	bne.w	80013ba <HAL_ADC_Init+0x18e>
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 8095 	bne.w	80013ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001298:	f023 0302 	bic.w	r3, r3, #2
 800129c:	f043 0202 	orr.w	r2, r3, #2
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7b1b      	ldrb	r3, [r3, #12]
 80012b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d003      	beq.n	80012ce <HAL_ADC_Init+0xa2>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <HAL_ADC_Init+0xa8>
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	e000      	b.n	80012d6 <HAL_ADC_Init+0xaa>
 80012d4:	2300      	movs	r3, #0
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7d1b      	ldrb	r3, [r3, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d119      	bne.n	8001318 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d109      	bne.n	8001300 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	035a      	lsls	r2, r3, #13
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e00b      	b.n	8001318 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	f043 0220 	orr.w	r2, r3, #32
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_ADC_Init+0x1a8>)
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	430b      	orrs	r3, r1
 800133e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001348:	d003      	beq.n	8001352 <HAL_ADC_Init+0x126>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d104      	bne.n	800135c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	3b01      	subs	r3, #1
 8001358:	051b      	lsls	r3, r3, #20
 800135a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	430a      	orrs	r2, r1
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_ADC_Init+0x1ac>)
 8001378:	4013      	ands	r3, r2
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	429a      	cmp	r2, r3
 800137e:	d10b      	bne.n	8001398 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001396:	e018      	b.n	80013ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f023 0312 	bic.w	r3, r3, #18
 80013a0:	f043 0210 	orr.w	r2, r3, #16
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b8:	e007      	b.n	80013ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f043 0210 	orr.w	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	ffe1f7fd 	.word	0xffe1f7fd
 80013d8:	ff1f0efe 	.word	0xff1f0efe

080013dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Start+0x1a>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e098      	b.n	8001528 <HAL_ADC_Start+0x14c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fad0 	bl	80019a4 <ADC_Enable>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 8087 	bne.w	800151e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a41      	ldr	r2, [pc, #260]	; (8001530 <HAL_ADC_Start+0x154>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d105      	bne.n	800143a <HAL_ADC_Start+0x5e>
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_ADC_Start+0x158>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d115      	bne.n	8001466 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d026      	beq.n	80014a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800145c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001464:	e01d      	b.n	80014a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_ADC_Start+0x158>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d004      	beq.n	8001486 <HAL_ADC_Start+0xaa>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <HAL_ADC_Start+0x154>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10d      	bne.n	80014a2 <HAL_ADC_Start+0xc6>
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_ADC_Start+0x158>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f023 0206 	bic.w	r2, r3, #6
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ba:	e002      	b.n	80014c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f06f 0202 	mvn.w	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014e2:	d113      	bne.n	800150c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_ADC_Start+0x154>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_ADC_Start+0x158>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	e00c      	b.n	8001526 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e003      	b.n	8001526 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012800 	.word	0x40012800
 8001534:	40012400 	.word	0x40012400

08001538 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Stop+0x1a>
 800154e:	2302      	movs	r3, #2
 8001550:	e01a      	b.n	8001588 <HAL_ADC_Stop+0x50>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fa7c 	bl	8001a58 <ADC_ConversionStop_Disable>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015a6:	f7ff fe13 	bl	80011d0 <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f043 0220 	orr.w	r2, r3, #32
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0d3      	b.n	800177a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d131      	bne.n	8001644 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12a      	bne.n	8001644 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015ee:	e021      	b.n	8001634 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f6:	d01d      	beq.n	8001634 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_ADC_PollForConversion+0x7e>
 80015fe:	f7ff fde7 	bl	80011d0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d212      	bcs.n	8001634 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10b      	bne.n	8001634 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f043 0204 	orr.w	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0a2      	b.n	800177a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0d6      	beq.n	80015f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001642:	e070      	b.n	8001726 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <HAL_ADC_PollForConversion+0x1f4>)
 8001646:	681c      	ldr	r4, [r3, #0]
 8001648:	2002      	movs	r0, #2
 800164a:	f001 f9c1 	bl	80029d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800164e:	4603      	mov	r3, r0
 8001650:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <HAL_ADC_PollForConversion+0x1f8>)
 800165c:	400b      	ands	r3, r1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_PollForConversion+0x104>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_ADC_PollForConversion+0x1fc>)
 800166a:	400b      	ands	r3, r1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d111      	bne.n	8001694 <HAL_ADC_PollForConversion+0x104>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6919      	ldr	r1, [r3, #16]
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_ADC_PollForConversion+0x200>)
 8001678:	400b      	ands	r3, r1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d108      	bne.n	8001690 <HAL_ADC_PollForConversion+0x100>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_ADC_PollForConversion+0x204>)
 8001686:	400b      	ands	r3, r1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_ADC_PollForConversion+0x100>
 800168c:	2314      	movs	r3, #20
 800168e:	e020      	b.n	80016d2 <HAL_ADC_PollForConversion+0x142>
 8001690:	2329      	movs	r3, #41	; 0x29
 8001692:	e01e      	b.n	80016d2 <HAL_ADC_PollForConversion+0x142>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6919      	ldr	r1, [r3, #16]
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_ADC_PollForConversion+0x200>)
 800169c:	400b      	ands	r3, r1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_PollForConversion+0x120>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68d9      	ldr	r1, [r3, #12]
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_ADC_PollForConversion+0x204>)
 80016aa:	400b      	ands	r3, r1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <HAL_ADC_PollForConversion+0x13c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_ADC_PollForConversion+0x208>)
 80016b8:	400b      	ands	r3, r1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <HAL_ADC_PollForConversion+0x140>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68d9      	ldr	r1, [r3, #12]
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_ADC_PollForConversion+0x208>)
 80016c6:	400b      	ands	r3, r1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_PollForConversion+0x140>
 80016cc:	2354      	movs	r3, #84	; 0x54
 80016ce:	e000      	b.n	80016d2 <HAL_ADC_PollForConversion+0x142>
 80016d0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016d8:	e021      	b.n	800171e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d01a      	beq.n	8001718 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_ADC_PollForConversion+0x168>
 80016e8:	f7ff fd72 	bl	80011d0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d20f      	bcs.n	8001718 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d90b      	bls.n	8001718 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f043 0204 	orr.w	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e030      	b.n	800177a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	429a      	cmp	r2, r3
 8001724:	d8d9      	bhi.n	80016da <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0212 	mvn.w	r2, #18
 800172e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001746:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800174a:	d115      	bne.n	8001778 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	bf00      	nop
 8001784:	20000000 	.word	0x20000000
 8001788:	24924924 	.word	0x24924924
 800178c:	00924924 	.word	0x00924924
 8001790:	12492492 	.word	0x12492492
 8001794:	00492492 	.word	0x00492492
 8001798:	00249249 	.word	0x00249249

0800179c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x20>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e0dc      	b.n	800198e <HAL_ADC_ConfigChannel+0x1da>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d81c      	bhi.n	800181e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b05      	subs	r3, #5
 80017f6:	221f      	movs	r2, #31
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4019      	ands	r1, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3b05      	subs	r3, #5
 8001810:	fa00 f203 	lsl.w	r2, r0, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
 800181c:	e03c      	b.n	8001898 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d81c      	bhi.n	8001860 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b23      	subs	r3, #35	; 0x23
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	4019      	ands	r1, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b23      	subs	r3, #35	; 0x23
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
 800185e:	e01b      	b.n	8001898 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b41      	subs	r3, #65	; 0x41
 8001872:	221f      	movs	r2, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b41      	subs	r3, #65	; 0x41
 800188c:	fa00 f203 	lsl.w	r2, r0, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d91c      	bls.n	80018da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	2207      	movs	r2, #7
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	3b1e      	subs	r3, #30
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	e019      	b.n	800190e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	2207      	movs	r2, #7
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4019      	ands	r1, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6898      	ldr	r0, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	fa00 f203 	lsl.w	r2, r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b10      	cmp	r3, #16
 8001914:	d003      	beq.n	800191e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800191a:	2b11      	cmp	r3, #17
 800191c:	d132      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_ADC_ConfigChannel+0x1e4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d125      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d126      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001944:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d11a      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_ADC_ConfigChannel+0x1e8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9a      	lsrs	r2, r3, #18
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001964:	e002      	b.n	800196c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3b01      	subs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f9      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x1b2>
 8001972:	e007      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40012400 	.word	0x40012400
 800199c:	20000000 	.word	0x20000000
 80019a0:	431bde83 	.word	0x431bde83

080019a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d040      	beq.n	8001a44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <ADC_Enable+0xac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <ADC_Enable+0xb0>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019e0:	e002      	b.n	80019e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ee:	f7ff fbef 	bl	80011d0 <HAL_GetTick>
 80019f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019f4:	e01f      	b.n	8001a36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f6:	f7ff fbeb 	bl	80011d0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d918      	bls.n	8001a36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d011      	beq.n	8001a36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e007      	b.n	8001a46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d1d8      	bne.n	80019f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d12e      	bne.n	8001ad0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a82:	f7ff fba5 	bl	80011d0 <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a88:	e01b      	b.n	8001ac2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a8a:	f7ff fba1 	bl	80011d0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d914      	bls.n	8001ac2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10d      	bne.n	8001ac2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e007      	b.n	8001ad2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d0dc      	beq.n	8001a8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	; (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff90 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff49 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff90 	bl	8001b94 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5f 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb0 	bl	8001bf8 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e169      	b.n	8001f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8158 	bne.w	8001f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a9a      	ldr	r2, [pc, #616]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d05e      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001ce0:	4a98      	ldr	r2, [pc, #608]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d875      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001ce6:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d058      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cec:	4a96      	ldr	r2, [pc, #600]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d86f      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cf2:	4a96      	ldr	r2, [pc, #600]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d052      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cf8:	4a94      	ldr	r2, [pc, #592]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d869      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cfe:	4a94      	ldr	r2, [pc, #592]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04c      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d04:	4a92      	ldr	r2, [pc, #584]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d863      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d0a:	4a92      	ldr	r2, [pc, #584]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d046      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d10:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d85d      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d82a      	bhi.n	8001d70 <HAL_GPIO_Init+0xcc>
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d859      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <HAL_GPIO_Init+0x80>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d8b 	.word	0x08001d8b
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001dd3 	.word	0x08001dd3
 8001d38:	08001dd3 	.word	0x08001dd3
 8001d3c:	08001dd3 	.word	0x08001dd3
 8001d40:	08001dd3 	.word	0x08001dd3
 8001d44:	08001dd3 	.word	0x08001dd3
 8001d48:	08001dd3 	.word	0x08001dd3
 8001d4c:	08001dd3 	.word	0x08001dd3
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001dd3 	.word	0x08001dd3
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dd3 	.word	0x08001dd3
 8001d60:	08001dd3 	.word	0x08001dd3
 8001d64:	08001dd3 	.word	0x08001dd3
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d95 	.word	0x08001d95
 8001d70:	4a79      	ldr	r2, [pc, #484]	; (8001f58 <HAL_GPIO_Init+0x2b4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e02c      	b.n	8001dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e029      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e024      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e01f      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e01a      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da6:	2304      	movs	r3, #4
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e013      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db4:	2308      	movs	r3, #8
 8001db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	611a      	str	r2, [r3, #16]
          break;
 8001dbe:	e009      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	615a      	str	r2, [r3, #20]
          break;
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          break;
 8001dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d801      	bhi.n	8001dde <HAL_GPIO_Init+0x13a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_Init+0x13e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d802      	bhi.n	8001df0 <HAL_GPIO_Init+0x14c>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x152>
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	3b08      	subs	r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80b1 	beq.w	8001f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e24:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e3c:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <HAL_GPIO_Init+0x2c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <HAL_GPIO_Init+0x2c4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <HAL_GPIO_Init+0x2cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1e0>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e90:	2300      	movs	r3, #0
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	492f      	ldr	r1, [pc, #188]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	492c      	ldr	r1, [pc, #176]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4928      	ldr	r1, [pc, #160]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	491e      	ldr	r1, [pc, #120]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4918      	ldr	r1, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4914      	ldr	r1, [pc, #80]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x2e2>
 8001f42:	bf00      	nop
 8001f44:	10320000 	.word	0x10320000
 8001f48:	10310000 	.word	0x10310000
 8001f4c:	10220000 	.word	0x10220000
 8001f50:	10210000 	.word	0x10210000
 8001f54:	10120000 	.word	0x10120000
 8001f58:	10110000 	.word	0x10110000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae8e 	bne.w	8001cb8 <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43d9      	mvns	r1, r3
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
	...

08002010 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_GPIOEx_ConfigEventout+0x28>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	430b      	orrs	r3, r1
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <HAL_GPIOEx_ConfigEventout+0x28>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010000 	.word	0x40010000

0800203c <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_GPIOEx_EnableEventout+0x18>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_GPIOEx_EnableEventout+0x18>)
 8002046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40010000 	.word	0x40010000

08002058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e272      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8087 	beq.w	8002186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b04      	cmp	r3, #4
 8002082:	d00c      	beq.n	800209e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002084:	4b8f      	ldr	r3, [pc, #572]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d112      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
 8002090:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d10b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06c      	beq.n	8002184 <HAL_RCC_OscConfig+0x12c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d168      	bne.n	8002184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e24c      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x76>
 80020c0:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e02e      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x98>
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0xbc>
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a71      	ldr	r2, [pc, #452]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 8002114:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff f84c 	bl	80011d0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f848 	bl	80011d0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e200      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xe4>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff f838 	bl	80011d0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff f834 	bl	80011d0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1ec      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x10c>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1c0      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4939      	ldr	r1, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e03a      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ffed 	bl	80011d0 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe ffe9 	bl	80011d0 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1a1      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4927      	ldr	r1, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe ffcc 	bl	80011d0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe ffc8 	bl	80011d0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e180      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03a      	beq.n	80022dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d019      	beq.n	80022a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe ffac 	bl	80011d0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe ffa8 	bl	80011d0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e160      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fac4 	bl	8002828 <RCC_Delay>
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe ff92 	bl	80011d0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ae:	e00f      	b.n	80022d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe ff8e 	bl	80011d0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d908      	bls.n	80022d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e146      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	42420000 	.word	0x42420000
 80022cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b92      	ldr	r3, [pc, #584]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e9      	bne.n	80022b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a6 	beq.w	8002436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a87      	ldr	r2, [pc, #540]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b85      	ldr	r3, [pc, #532]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x4c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x4c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7e      	ldr	r2, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe ff4f 	bl	80011d0 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fe ff4b 	bl	80011d0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e103      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b75      	ldr	r3, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x4c8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x312>
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x334>
 8002372:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a66      	ldr	r2, [pc, #408]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	e01c      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x356>
 8002394:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a60      	ldr	r2, [pc, #384]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a5d      	ldr	r2, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 80023ae:	4b5b      	ldr	r3, [pc, #364]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe feff 	bl	80011d0 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fefb 	bl	80011d0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0b1      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCC_OscConfig+0x37e>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fee9 	bl	80011d0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fee5 	bl	80011d0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e09b      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ee      	bne.n	8002402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a3b      	ldr	r2, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d061      	beq.n	8002510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d146      	bne.n	80024e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe feb9 	bl	80011d0 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe feb5 	bl	80011d0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e06d      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d108      	bne.n	800249c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a19      	ldr	r1, [r3, #32]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	430b      	orrs	r3, r1
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe89 	bl	80011d0 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fe85 	bl	80011d0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e03d      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46a>
 80024e0:	e035      	b.n	800254e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe72 	bl	80011d0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fe6e 	bl	80011d0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e026      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_OscConfig+0x4c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x498>
 800250e:	e01e      	b.n	800254e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e019      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x500>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	429a      	cmp	r2, r3
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d0      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4965      	ldr	r1, [pc, #404]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d040      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e073      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe fdc0 	bl	80011d0 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fdbc 	bl	80011d0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e053      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d210      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f821 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1cc>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd1e 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40022000 	.word	0x40022000
 8002720:	40021000 	.word	0x40021000
 8002724:	0800706c 	.word	0x0800706c
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b490      	push	{r4, r7}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002738:	1d3c      	adds	r4, r7, #4
 800273a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002740:	f240 2301 	movw	r3, #513	; 0x201
 8002744:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x40>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x46>
 800276e:	e02b      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002772:	623b      	str	r3, [r7, #32]
      break;
 8002774:	e02b      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3328      	adds	r3, #40	; 0x28
 8002780:	443b      	add	r3, r7
 8002782:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002786:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d012      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	0c5b      	lsrs	r3, r3, #17
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	3328      	adds	r3, #40	; 0x28
 800279e:	443b      	add	r3, r7
 80027a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027aa:	fb03 f202 	mul.w	r2, r3, r2
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e004      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	623b      	str	r3, [r7, #32]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc90      	pop	{r4, r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	08007008 	.word	0x08007008
 80027e0:	40021000 	.word	0x40021000
 80027e4:	007a1200 	.word	0x007a1200
 80027e8:	003d0900 	.word	0x003d0900

080027ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b02      	ldr	r3, [pc, #8]	; (80027fc <HAL_RCC_GetHCLKFreq+0x10>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002804:	f7ff fff2 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0adb      	lsrs	r3, r3, #11
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	0800707c 	.word	0x0800707c

08002828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <RCC_Delay+0x34>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <RCC_Delay+0x38>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0a5b      	lsrs	r3, r3, #9
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002844:	bf00      	nop
  }
  while (Delay --);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e5a      	subs	r2, r3, #1
 800284a:	60fa      	str	r2, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f9      	bne.n	8002844 <RCC_Delay+0x1c>
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000000 	.word	0x20000000
 8002860:	10624dd3 	.word	0x10624dd3

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d07d      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002884:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	61d3      	str	r3, [r2, #28]
 800289c:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d118      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fc84 	bl	80011d0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	e008      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fc80 	bl	80011d0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e06d      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d02e      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d027      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fc4f 	bl	80011d0 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fc4b 	bl	80011d0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e036      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4917      	ldr	r1, [pc, #92]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	4313      	orrs	r3, r2
 8002968:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42420440 	.word	0x42420440

080029d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08d      	sub	sp, #52	; 0x34
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80029da:	f107 040c 	add.w	r4, r7, #12
 80029de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029e4:	f240 2301 	movw	r3, #513	; 0x201
 80029e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	f200 808e 	bhi.w	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d049      	beq.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d079      	beq.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a18:	e086      	b.n	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002a1a:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d07f      	beq.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	3330      	adds	r3, #48	; 0x30
 8002a36:	443b      	add	r3, r7
 8002a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a3c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d017      	beq.n	8002a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a48:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	3330      	adds	r3, #48	; 0x30
 8002a54:	443b      	add	r3, r7
 8002a56:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a66:	4a37      	ldr	r2, [pc, #220]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a76:	e004      	b.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a94:	e04a      	b.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002aa4:	e042      	b.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d108      	bne.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac8:	e01f      	b.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d109      	bne.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002ae2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae8:	e00f      	b.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002b02:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b08:	e012      	b.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002b0a:	e011      	b.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b0c:	f7ff fe78 	bl	8002800 <HAL_RCC_GetPCLK2Freq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0b9b      	lsrs	r3, r3, #14
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b26:	e004      	b.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002b28:	bf00      	nop
 8002b2a:	e002      	b.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002b2c:	bf00      	nop
 8002b2e:	e000      	b.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002b30:	bf00      	nop
    }
  }
  return (frequency);
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3734      	adds	r7, #52	; 0x34
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	08007018 	.word	0x08007018
 8002b40:	40021000 	.word	0x40021000
 8002b44:	007a1200 	.word	0x007a1200
 8002b48:	003d0900 	.word	0x003d0900
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab

08002b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e076      	b.n	8002c50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b72:	d009      	beq.n	8002b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
 8002b7a:	e005      	b.n	8002b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe f9e6 	bl	8000f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	0c1a      	lsrs	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 0204 	and.w	r2, r2, #4
 8002c2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c66:	2301      	movs	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x26>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e18a      	b.n	8002f94 <HAL_SPI_TransmitReceive+0x33c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c86:	f7fe faa3 	bl	80011d0 <HAL_GetTick>
 8002c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d00f      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x70>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cae:	d107      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x68>
 8002cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d003      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cc6:	e15b      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x82>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x82>
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ce0:	e14e      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d003      	beq.n	8002cf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	887a      	ldrh	r2, [r7, #2]
 8002d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d007      	beq.n	8002d4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d52:	d178      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_SPI_TransmitReceive+0x10a>
 8002d5c:	8b7b      	ldrh	r3, [r7, #26]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d166      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d86:	e053      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d11b      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x176>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x176>
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d113      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	1c9a      	adds	r2, r3, #2
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d119      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x1b8>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d014      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	b292      	uxth	r2, r2
 8002df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e10:	f7fe f9de 	bl	80011d0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d807      	bhi.n	8002e30 <HAL_SPI_TransmitReceive+0x1d8>
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d003      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e2e:	e0a7      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1a6      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x130>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1a1      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x130>
 8002e44:	e07c      	b.n	8002f40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x1fc>
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d16b      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7a:	e057      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11c      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x26c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x26c>
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d114      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d119      	bne.n	8002f06 <HAL_SPI_TransmitReceive+0x2ae>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d014      	beq.n	8002f06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f02:	2301      	movs	r3, #1
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f06:	f7fe f963 	bl	80011d0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d803      	bhi.n	8002f1e <HAL_SPI_TransmitReceive+0x2c6>
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d102      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x2cc>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f2a:	e029      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1a2      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x224>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d19d      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f8b1 	bl	80030ac <SPI_EndRxTxTransaction>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f5c:	e010      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10b      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	e000      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3730      	adds	r7, #48	; 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fac:	f7fe f910 	bl	80011d0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4413      	add	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fbc:	f7fe f908 	bl	80011d0 <HAL_GetTick>
 8002fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fc2:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	015b      	lsls	r3, r3, #5
 8002fc8:	0d1b      	lsrs	r3, r3, #20
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fd2:	e054      	b.n	800307e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d050      	beq.n	800307e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fdc:	f7fe f8f8 	bl	80011d0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d13d      	bne.n	800306e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800300a:	d111      	bne.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	d004      	beq.n	8003020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301e:	d107      	bne.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003038:	d10f      	bne.n	800305a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e017      	b.n	800309e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	3b01      	subs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d19b      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff6a 	bl	8002f9c <SPI_WaitFlagStateUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e000      	b.n	80030e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <MX_FATFS_Init+0x18>)
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <MX_FATFS_Init+0x1c>)
 80030f0:	f003 f9d0 	bl	8006494 <FATFS_LinkDriver>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <MX_FATFS_Init+0x20>)
 80030fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000238 	.word	0x20000238
 8003104:	2000000c 	.word	0x2000000c
 8003108:	20000234 	.word	0x20000234

0800310c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003110:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f9dc 	bl	80034e4 <USER_SPI_initialize>
 800312c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 faba 	bl	80036bc <USER_SPI_status>
 8003148:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8003162:	7bf8      	ldrb	r0, [r7, #15]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	f000 fabb 	bl	80036e4 <USER_SPI_read>
 800316e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8003188:	7bf8      	ldrb	r0, [r7, #15]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	f000 fb0e 	bl	80037b0 <USER_SPI_write>
 8003194:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	603a      	str	r2, [r7, #0]
 80031a8:	71fb      	strb	r3, [r7, #7]
 80031aa:	460b      	mov	r3, r1
 80031ac:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80031ae:	79b9      	ldrb	r1, [r7, #6]
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb77 	bl	80038a8 <USER_SPI_ioctl>
 80031ba:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80031cc:	f7fe f800 	bl	80011d0 <HAL_GetTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <SPI_Timer_On+0x20>)
 80031d4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <SPI_Timer_On+0x24>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000240 	.word	0x20000240
 80031e8:	20000244 	.word	0x20000244

080031ec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80031f0:	f7fd ffee 	bl	80011d0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <SPI_Timer_Status+0x24>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <SPI_Timer_Status+0x28>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	bf34      	ite	cc
 8003204:	2301      	movcc	r3, #1
 8003206:	2300      	movcs	r3, #0
 8003208:	b2db      	uxtb	r3, r3
}
 800320a:	4618      	mov	r0, r3
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000240 	.word	0x20000240
 8003214:	20000244 	.word	0x20000244

08003218 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003222:	f107 020f 	add.w	r2, r7, #15
 8003226:	1df9      	adds	r1, r7, #7
 8003228:	2332      	movs	r3, #50	; 0x32
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	4804      	ldr	r0, [pc, #16]	; (8003240 <xchg_spi+0x28>)
 8003230:	f7ff fd12 	bl	8002c58 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200000d4 	.word	0x200000d4

08003244 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e00a      	b.n	800326a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	18d4      	adds	r4, r2, r3
 800325a:	20ff      	movs	r0, #255	; 0xff
 800325c:	f7ff ffdc 	bl	8003218 <xchg_spi>
 8003260:	4603      	mov	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d3f0      	bcc.n	8003254 <rcvr_spi_multi+0x10>
	}
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e009      	b.n	80032a0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ffbf 	bl	8003218 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3f1      	bcc.n	800328c <xmit_spi_multi+0x10>
	}
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80032ba:	f7fd ff89 	bl	80011d0 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80032c4:	20ff      	movs	r0, #255	; 0xff
 80032c6:	f7ff ffa7 	bl	8003218 <xchg_spi>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2bff      	cmp	r3, #255	; 0xff
 80032d2:	d007      	beq.n	80032e4 <wait_ready+0x32>
 80032d4:	f7fd ff7c 	bl	80011d0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8ef      	bhi.n	80032c4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2bff      	cmp	r3, #255	; 0xff
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003302:	4804      	ldr	r0, [pc, #16]	; (8003314 <despiselect+0x1c>)
 8003304:	f7fe fe52 	bl	8001fac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003308:	20ff      	movs	r0, #255	; 0xff
 800330a:	f7ff ff85 	bl	8003218 <xchg_spi>

}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40011000 	.word	0x40011000

08003318 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800331c:	2200      	movs	r2, #0
 800331e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003322:	480a      	ldr	r0, [pc, #40]	; (800334c <spiselect+0x34>)
 8003324:	f7fe fe42 	bl	8001fac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003328:	20ff      	movs	r0, #255	; 0xff
 800332a:	f7ff ff75 	bl	8003218 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800332e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003332:	f7ff ffbe 	bl	80032b2 <wait_ready>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <spiselect+0x28>
 800333c:	2301      	movs	r3, #1
 800333e:	e002      	b.n	8003346 <spiselect+0x2e>

	despiselect();
 8003340:	f7ff ffda 	bl	80032f8 <despiselect>
	return 0;	/* Timeout */
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40011000 	.word	0x40011000

08003350 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800335a:	20c8      	movs	r0, #200	; 0xc8
 800335c:	f7ff ff32 	bl	80031c4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003360:	20ff      	movs	r0, #255	; 0xff
 8003362:	f7ff ff59 	bl	8003218 <xchg_spi>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2bff      	cmp	r3, #255	; 0xff
 800336e:	d104      	bne.n	800337a <rcvr_datablock+0x2a>
 8003370:	f7ff ff3c 	bl	80031ec <SPI_Timer_Status>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f2      	bne.n	8003360 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2bfe      	cmp	r3, #254	; 0xfe
 800337e:	d001      	beq.n	8003384 <rcvr_datablock+0x34>
 8003380:	2300      	movs	r3, #0
 8003382:	e00a      	b.n	800339a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff5c 	bl	8003244 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800338c:	20ff      	movs	r0, #255	; 0xff
 800338e:	f7ff ff43 	bl	8003218 <xchg_spi>
 8003392:	20ff      	movs	r0, #255	; 0xff
 8003394:	f7ff ff40 	bl	8003218 <xchg_spi>

	return 1;						/* Function succeeded */
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80033ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033b2:	f7ff ff7e 	bl	80032b2 <wait_ready>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xmit_datablock+0x1e>
 80033bc:	2300      	movs	r3, #0
 80033be:	e01e      	b.n	80033fe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff28 	bl	8003218 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2bfd      	cmp	r3, #253	; 0xfd
 80033cc:	d016      	beq.n	80033fc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80033ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff52 	bl	800327c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80033d8:	20ff      	movs	r0, #255	; 0xff
 80033da:	f7ff ff1d 	bl	8003218 <xchg_spi>
 80033de:	20ff      	movs	r0, #255	; 0xff
 80033e0:	f7ff ff1a 	bl	8003218 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80033e4:	20ff      	movs	r0, #255	; 0xff
 80033e6:	f7ff ff17 	bl	8003218 <xchg_spi>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d001      	beq.n	80033fc <xmit_datablock+0x5a>
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <xmit_datablock+0x5c>
	}
	return 1;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	6039      	str	r1, [r7, #0]
 8003410:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da0e      	bge.n	8003438 <send_cmd+0x32>
		cmd &= 0x7F;
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003420:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003422:	2100      	movs	r1, #0
 8003424:	2037      	movs	r0, #55	; 0x37
 8003426:	f7ff ffee 	bl	8003406 <send_cmd>
 800342a:	4603      	mov	r3, r0
 800342c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d901      	bls.n	8003438 <send_cmd+0x32>
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	e051      	b.n	80034dc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d008      	beq.n	8003450 <send_cmd+0x4a>
		despiselect();
 800343e:	f7ff ff5b 	bl	80032f8 <despiselect>
		if (!spiselect()) return 0xFF;
 8003442:	f7ff ff69 	bl	8003318 <spiselect>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <send_cmd+0x4a>
 800344c:	23ff      	movs	r3, #255	; 0xff
 800344e:	e045      	b.n	80034dc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fedd 	bl	8003218 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	0e1b      	lsrs	r3, r3, #24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fed7 	bl	8003218 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fed1 	bl	8003218 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fecb 	bl	8003218 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fec6 	bl	8003218 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <send_cmd+0x94>
 8003496:	2395      	movs	r3, #149	; 0x95
 8003498:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d101      	bne.n	80034a4 <send_cmd+0x9e>
 80034a0:	2387      	movs	r3, #135	; 0x87
 80034a2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff feb6 	bl	8003218 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d102      	bne.n	80034b8 <send_cmd+0xb2>
 80034b2:	20ff      	movs	r0, #255	; 0xff
 80034b4:	f7ff feb0 	bl	8003218 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80034b8:	230a      	movs	r3, #10
 80034ba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80034bc:	20ff      	movs	r0, #255	; 0xff
 80034be:	f7ff feab 	bl	8003218 <xchg_spi>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80034c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da05      	bge.n	80034da <send_cmd+0xd4>
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <send_cmd+0xb6>

	return res;							/* Return received response */
 80034da:	7bbb      	ldrb	r3, [r7, #14]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <USER_SPI_initialize+0x14>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d6      	b.n	80036a6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80034f8:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <USER_SPI_initialize+0x2a>
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e0cb      	b.n	80036a6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800350e:	4b69      	ldr	r3, [pc, #420]	; (80036b4 <USER_SPI_initialize+0x1d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <USER_SPI_initialize+0x1d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003520:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003522:	230a      	movs	r3, #10
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e005      	b.n	8003534 <USER_SPI_initialize+0x50>
 8003528:	20ff      	movs	r0, #255	; 0xff
 800352a:	f7ff fe75 	bl	8003218 <xchg_spi>
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	3b01      	subs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f6      	bne.n	8003528 <USER_SPI_initialize+0x44>

	ty = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800353e:	2100      	movs	r1, #0
 8003540:	2000      	movs	r0, #0
 8003542:	f7ff ff60 	bl	8003406 <send_cmd>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 808b 	bne.w	8003664 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800354e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003552:	f7ff fe37 	bl	80031c4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800355a:	2008      	movs	r0, #8
 800355c:	f7ff ff53 	bl	8003406 <send_cmd>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d151      	bne.n	800360a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e00d      	b.n	8003588 <USER_SPI_initialize+0xa4>
 800356c:	7bfc      	ldrb	r4, [r7, #15]
 800356e:	20ff      	movs	r0, #255	; 0xff
 8003570:	f7ff fe52 	bl	8003218 <xchg_spi>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	f104 0310 	add.w	r3, r4, #16
 800357c:	443b      	add	r3, r7
 800357e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3301      	adds	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d9ee      	bls.n	800356c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800358e:	7abb      	ldrb	r3, [r7, #10]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d167      	bne.n	8003664 <USER_SPI_initialize+0x180>
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	2baa      	cmp	r3, #170	; 0xaa
 8003598:	d164      	bne.n	8003664 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800359a:	bf00      	nop
 800359c:	f7ff fe26 	bl	80031ec <SPI_Timer_Status>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <USER_SPI_initialize+0xd2>
 80035a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035aa:	20a9      	movs	r0, #169	; 0xa9
 80035ac:	f7ff ff2b 	bl	8003406 <send_cmd>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f2      	bne.n	800359c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80035b6:	f7ff fe19 	bl	80031ec <SPI_Timer_Status>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d051      	beq.n	8003664 <USER_SPI_initialize+0x180>
 80035c0:	2100      	movs	r1, #0
 80035c2:	203a      	movs	r0, #58	; 0x3a
 80035c4:	f7ff ff1f 	bl	8003406 <send_cmd>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d14a      	bne.n	8003664 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e00d      	b.n	80035f0 <USER_SPI_initialize+0x10c>
 80035d4:	7bfc      	ldrb	r4, [r7, #15]
 80035d6:	20ff      	movs	r0, #255	; 0xff
 80035d8:	f7ff fe1e 	bl	8003218 <xchg_spi>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	f104 0310 	add.w	r3, r4, #16
 80035e4:	443b      	add	r3, r7
 80035e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	3301      	adds	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d9ee      	bls.n	80035d4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80035f6:	7a3b      	ldrb	r3, [r7, #8]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <USER_SPI_initialize+0x120>
 8003600:	230c      	movs	r3, #12
 8003602:	e000      	b.n	8003606 <USER_SPI_initialize+0x122>
 8003604:	2304      	movs	r3, #4
 8003606:	737b      	strb	r3, [r7, #13]
 8003608:	e02c      	b.n	8003664 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800360a:	2100      	movs	r1, #0
 800360c:	20a9      	movs	r0, #169	; 0xa9
 800360e:	f7ff fefa 	bl	8003406 <send_cmd>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d804      	bhi.n	8003622 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003618:	2302      	movs	r3, #2
 800361a:	737b      	strb	r3, [r7, #13]
 800361c:	23a9      	movs	r3, #169	; 0xa9
 800361e:	73bb      	strb	r3, [r7, #14]
 8003620:	e003      	b.n	800362a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003622:	2301      	movs	r3, #1
 8003624:	737b      	strb	r3, [r7, #13]
 8003626:	2301      	movs	r3, #1
 8003628:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800362a:	bf00      	nop
 800362c:	f7ff fdde 	bl	80031ec <SPI_Timer_Status>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <USER_SPI_initialize+0x162>
 8003636:	7bbb      	ldrb	r3, [r7, #14]
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fee3 	bl	8003406 <send_cmd>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f2      	bne.n	800362c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003646:	f7ff fdd1 	bl	80031ec <SPI_Timer_Status>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <USER_SPI_initialize+0x17c>
 8003650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003654:	2010      	movs	r0, #16
 8003656:	f7ff fed6 	bl	8003406 <send_cmd>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <USER_SPI_initialize+0x180>
				ty = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <USER_SPI_initialize+0x1d4>)
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	7013      	strb	r3, [r2, #0]
	despiselect();
 800366a:	f7ff fe45 	bl	80032f8 <despiselect>

	if (ty) {			/* OK */
 800366e:	7b7b      	ldrb	r3, [r7, #13]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <USER_SPI_initialize+0x1d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <USER_SPI_initialize+0x1d0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0210 	orr.w	r2, r2, #16
 8003686:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e002      	b.n	80036a0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <USER_SPI_initialize+0x1cc>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000020 	.word	0x20000020
 80036b4:	200000d4 	.word	0x200000d4
 80036b8:	2000023c 	.word	0x2000023c

080036bc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <USER_SPI_status+0x14>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e002      	b.n	80036d6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <USER_SPI_status+0x24>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	20000020 	.word	0x20000020

080036e4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <USER_SPI_read+0x1c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <USER_SPI_read+0x20>
 8003700:	2304      	movs	r3, #4
 8003702:	e04d      	b.n	80037a0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <USER_SPI_read+0xc4>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <USER_SPI_read+0x32>
 8003712:	2303      	movs	r3, #3
 8003714:	e044      	b.n	80037a0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <USER_SPI_read+0xc8>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <USER_SPI_read+0x44>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d111      	bne.n	8003752 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	2011      	movs	r0, #17
 8003732:	f7ff fe68 	bl	8003406 <send_cmd>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d129      	bne.n	8003790 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800373c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f7ff fe05 	bl	8003350 <rcvr_datablock>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <USER_SPI_read+0xac>
			count = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	e01e      	b.n	8003790 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	2012      	movs	r0, #18
 8003756:	f7ff fe56 	bl	8003406 <send_cmd>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d117      	bne.n	8003790 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003764:	68b8      	ldr	r0, [r7, #8]
 8003766:	f7ff fdf3 	bl	8003350 <rcvr_datablock>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <USER_SPI_read+0xa2>
				buff += 512;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003776:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ed      	bne.n	8003760 <USER_SPI_read+0x7c>
 8003784:	e000      	b.n	8003788 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003786:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003788:	2100      	movs	r1, #0
 800378a:	200c      	movs	r0, #12
 800378c:	f7ff fe3b 	bl	8003406 <send_cmd>
		}
	}
	despiselect();
 8003790:	f7ff fdb2 	bl	80032f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000020 	.word	0x20000020
 80037ac:	2000023c 	.word	0x2000023c

080037b0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <USER_SPI_write+0x1c>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <USER_SPI_write+0x20>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e063      	b.n	8003898 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <USER_SPI_write+0xf0>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <USER_SPI_write+0x32>
 80037de:	2303      	movs	r3, #3
 80037e0:	e05a      	b.n	8003898 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <USER_SPI_write+0xf0>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <USER_SPI_write+0x44>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e051      	b.n	8003898 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <USER_SPI_write+0xf4>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <USER_SPI_write+0x56>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	025b      	lsls	r3, r3, #9
 8003804:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d110      	bne.n	800382e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	2018      	movs	r0, #24
 8003810:	f7ff fdf9 	bl	8003406 <send_cmd>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800381a:	21fe      	movs	r1, #254	; 0xfe
 800381c:	68b8      	ldr	r0, [r7, #8]
 800381e:	f7ff fdc0 	bl	80033a2 <xmit_datablock>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02f      	beq.n	8003888 <USER_SPI_write+0xd8>
			count = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	e02c      	b.n	8003888 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <USER_SPI_write+0xf4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f003 0306 	and.w	r3, r3, #6
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <USER_SPI_write+0x92>
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	2097      	movs	r0, #151	; 0x97
 800383e:	f7ff fde2 	bl	8003406 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2019      	movs	r0, #25
 8003846:	f7ff fdde 	bl	8003406 <send_cmd>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11b      	bne.n	8003888 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003850:	21fc      	movs	r1, #252	; 0xfc
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f7ff fda5 	bl	80033a2 <xmit_datablock>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <USER_SPI_write+0xc4>
				buff += 512;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003864:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3b01      	subs	r3, #1
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ee      	bne.n	8003850 <USER_SPI_write+0xa0>
 8003872:	e000      	b.n	8003876 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003874:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003876:	21fd      	movs	r1, #253	; 0xfd
 8003878:	2000      	movs	r0, #0
 800387a:	f7ff fd92 	bl	80033a2 <xmit_datablock>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <USER_SPI_write+0xd8>
 8003884:	2301      	movs	r3, #1
 8003886:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003888:	f7ff fd36 	bl	80032f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000020 	.word	0x20000020
 80038a4:	2000023c 	.word	0x2000023c

080038a8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	; 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	603a      	str	r2, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
 80038b4:	460b      	mov	r3, r1
 80038b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <USER_SPI_ioctl+0x1a>
 80038be:	2304      	movs	r3, #4
 80038c0:	e15a      	b.n	8003b78 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80038c2:	4baf      	ldr	r3, [pc, #700]	; (8003b80 <USER_SPI_ioctl+0x2d8>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <USER_SPI_ioctl+0x2c>
 80038d0:	2303      	movs	r3, #3
 80038d2:	e151      	b.n	8003b78 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80038da:	79bb      	ldrb	r3, [r7, #6]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	f200 8136 	bhi.w	8003b4e <USER_SPI_ioctl+0x2a6>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <USER_SPI_ioctl+0x40>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003b4f 	.word	0x08003b4f
 80038f4:	080039bd 	.word	0x080039bd
 80038f8:	08003ab3 	.word	0x08003ab3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80038fc:	f7ff fd0c 	bl	8003318 <spiselect>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8127 	beq.w	8003b56 <USER_SPI_ioctl+0x2ae>
 8003908:	2300      	movs	r3, #0
 800390a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800390e:	e122      	b.n	8003b56 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003910:	2100      	movs	r1, #0
 8003912:	2009      	movs	r0, #9
 8003914:	f7ff fd77 	bl	8003406 <send_cmd>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 811d 	bne.w	8003b5a <USER_SPI_ioctl+0x2b2>
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	2110      	movs	r1, #16
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fd12 	bl	8003350 <rcvr_datablock>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8113 	beq.w	8003b5a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003934:	7b3b      	ldrb	r3, [r7, #12]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d111      	bne.n	8003962 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800393e:	7d7b      	ldrb	r3, [r7, #21]
 8003940:	461a      	mov	r2, r3
 8003942:	7d3b      	ldrb	r3, [r7, #20]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	4413      	add	r3, r2
 8003948:	461a      	mov	r2, r3
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003952:	4413      	add	r3, r2
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	029a      	lsls	r2, r3, #10
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e028      	b.n	80039b4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003962:	7c7b      	ldrb	r3, [r7, #17]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	7dbb      	ldrb	r3, [r7, #22]
 800396c:	09db      	lsrs	r3, r3, #7
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4413      	add	r3, r2
 8003972:	b2da      	uxtb	r2, r3
 8003974:	7d7b      	ldrb	r3, [r7, #21]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4413      	add	r3, r2
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3302      	adds	r3, #2
 8003986:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800398a:	7d3b      	ldrb	r3, [r7, #20]
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	7cbb      	ldrb	r3, [r7, #18]
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039a0:	4413      	add	r3, r2
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80039a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039aa:	3b09      	subs	r3, #9
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	409a      	lsls	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80039ba:	e0ce      	b.n	8003b5a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80039bc:	4b71      	ldr	r3, [pc, #452]	; (8003b84 <USER_SPI_ioctl+0x2dc>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d031      	beq.n	8003a2c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80039c8:	2100      	movs	r1, #0
 80039ca:	208d      	movs	r0, #141	; 0x8d
 80039cc:	f7ff fd1b 	bl	8003406 <send_cmd>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 80c3 	bne.w	8003b5e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80039d8:	20ff      	movs	r0, #255	; 0xff
 80039da:	f7ff fc1d 	bl	8003218 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	2110      	movs	r1, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fcb3 	bl	8003350 <rcvr_datablock>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80b6 	beq.w	8003b5e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80039f2:	2330      	movs	r3, #48	; 0x30
 80039f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80039f8:	e007      	b.n	8003a0a <USER_SPI_ioctl+0x162>
 80039fa:	20ff      	movs	r0, #255	; 0xff
 80039fc:	f7ff fc0c 	bl	8003218 <xchg_spi>
 8003a00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a04:	3b01      	subs	r3, #1
 8003a06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003a0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f3      	bne.n	80039fa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003a12:	7dbb      	ldrb	r3, [r7, #22]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	fa03 f202 	lsl.w	r2, r3, r2
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003a2a:	e098      	b.n	8003b5e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2009      	movs	r0, #9
 8003a30:	f7ff fce9 	bl	8003406 <send_cmd>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 8091 	bne.w	8003b5e <USER_SPI_ioctl+0x2b6>
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	2110      	movs	r1, #16
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fc84 	bl	8003350 <rcvr_datablock>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8087 	beq.w	8003b5e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <USER_SPI_ioctl+0x2dc>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003a5c:	7dbb      	ldrb	r3, [r7, #22]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003a64:	7dfa      	ldrb	r2, [r7, #23]
 8003a66:	09d2      	lsrs	r2, r2, #7
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	7e7b      	ldrb	r3, [r7, #25]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e013      	b.n	8003aaa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003a82:	7dbb      	ldrb	r3, [r7, #22]
 8003a84:	109b      	asrs	r3, r3, #2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	7dfa      	ldrb	r2, [r7, #23]
 8003a90:	00d2      	lsls	r2, r2, #3
 8003a92:	f002 0218 	and.w	r2, r2, #24
 8003a96:	7df9      	ldrb	r1, [r7, #23]
 8003a98:	0949      	lsrs	r1, r1, #5
 8003a9a:	b2c9      	uxtb	r1, r1
 8003a9c:	440a      	add	r2, r1
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003ab0:	e055      	b.n	8003b5e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <USER_SPI_ioctl+0x2dc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d051      	beq.n	8003b62 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003abe:	f107 020c 	add.w	r2, r7, #12
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	210b      	movs	r1, #11
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff feee 	bl	80038a8 <USER_SPI_ioctl>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d149      	bne.n	8003b66 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003ad2:	7b3b      	ldrb	r3, [r7, #12]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <USER_SPI_ioctl+0x23e>
 8003adc:	7dbb      	ldrb	r3, [r7, #22]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d041      	beq.n	8003b6a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	623b      	str	r3, [r7, #32]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <USER_SPI_ioctl+0x2dc>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	025b      	lsls	r3, r3, #9
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	025b      	lsls	r3, r3, #9
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b10:	2020      	movs	r0, #32
 8003b12:	f7ff fc78 	bl	8003406 <send_cmd>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d128      	bne.n	8003b6e <USER_SPI_ioctl+0x2c6>
 8003b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1e:	2021      	movs	r0, #33	; 0x21
 8003b20:	f7ff fc71 	bl	8003406 <send_cmd>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d121      	bne.n	8003b6e <USER_SPI_ioctl+0x2c6>
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	2026      	movs	r0, #38	; 0x26
 8003b2e:	f7ff fc6a 	bl	8003406 <send_cmd>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11a      	bne.n	8003b6e <USER_SPI_ioctl+0x2c6>
 8003b38:	f247 5030 	movw	r0, #30000	; 0x7530
 8003b3c:	f7ff fbb9 	bl	80032b2 <wait_ready>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003b4c:	e00f      	b.n	8003b6e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003b4e:	2304      	movs	r3, #4
 8003b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b54:	e00c      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		break;
 8003b56:	bf00      	nop
 8003b58:	e00a      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		break;
 8003b5a:	bf00      	nop
 8003b5c:	e008      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		break;
 8003b5e:	bf00      	nop
 8003b60:	e006      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <USER_SPI_ioctl+0x2c8>
		break;
 8003b6e:	bf00      	nop
	}

	despiselect();
 8003b70:	f7ff fbc2 	bl	80032f8 <despiselect>

	return res;
 8003b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000020 	.word	0x20000020
 8003b84:	2000023c 	.word	0x2000023c

08003b88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <disk_status+0x30>)
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	4905      	ldr	r1, [pc, #20]	; (8003bb8 <disk_status+0x30>)
 8003ba2:	440a      	add	r2, r1
 8003ba4:	7a12      	ldrb	r2, [r2, #8]
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4798      	blx	r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000268 	.word	0x20000268

08003bbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <disk_initialize+0x48>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <disk_initialize+0x48>)
 8003bd8:	2101      	movs	r1, #1
 8003bda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <disk_initialize+0x48>)
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	79fa      	ldrb	r2, [r7, #7]
 8003bea:	4906      	ldr	r1, [pc, #24]	; (8003c04 <disk_initialize+0x48>)
 8003bec:	440a      	add	r2, r1
 8003bee:	7a12      	ldrb	r2, [r2, #8]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000268 	.word	0x20000268

08003c08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <disk_read+0x3c>)
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	689c      	ldr	r4, [r3, #8]
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	4a07      	ldr	r2, [pc, #28]	; (8003c44 <disk_read+0x3c>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	7a18      	ldrb	r0, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	47a0      	blx	r4
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000268 	.word	0x20000268

08003c48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <disk_write+0x3c>)
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68dc      	ldr	r4, [r3, #12]
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <disk_write+0x3c>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	7a18      	ldrb	r0, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	47a0      	blx	r4
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd90      	pop	{r4, r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000268 	.word	0x20000268

08003c88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	603a      	str	r2, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
 8003c94:	460b      	mov	r3, r1
 8003c96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <disk_ioctl+0x38>)
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	79fa      	ldrb	r2, [r7, #7]
 8003ca6:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <disk_ioctl+0x38>)
 8003ca8:	440a      	add	r2, r1
 8003caa:	7a10      	ldrb	r0, [r2, #8]
 8003cac:	79b9      	ldrb	r1, [r7, #6]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4798      	blx	r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  return res;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000268 	.word	0x20000268

08003cc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003cd8:	e007      	b.n	8003cea <mem_cpy+0x26>
		*d++ = *s++;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	1c53      	adds	r3, r2, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	6179      	str	r1, [r7, #20]
 8003ce6:	7812      	ldrb	r2, [r2, #0]
 8003ce8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f2      	bne.n	8003cda <mem_cpy+0x16>
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003d10:	e005      	b.n	8003d1e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	617a      	str	r2, [r7, #20]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f4      	bne.n	8003d12 <mem_set+0x12>
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003d4c:	bf00      	nop
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <mem_cmp+0x40>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	61fa      	str	r2, [r7, #28]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	61ba      	str	r2, [r7, #24]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ec      	beq.n	8003d4e <mem_cmp+0x1a>
	return r;
 8003d74:	697b      	ldr	r3, [r7, #20]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003d8a:	e002      	b.n	8003d92 <chk_chr+0x12>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <chk_chr+0x26>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d1f2      	bne.n	8003d8c <chk_chr+0xc>
	return *str;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	781b      	ldrb	r3, [r3, #0]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e038      	b.n	8003e3a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003dc8:	492f      	ldr	r1, [pc, #188]	; (8003e88 <chk_lock+0xd4>)
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d029      	beq.n	8003e30 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003ddc:	492a      	ldr	r1, [pc, #168]	; (8003e88 <chk_lock+0xd4>)
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d11e      	bne.n	8003e34 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003df6:	4924      	ldr	r1, [pc, #144]	; (8003e88 <chk_lock+0xd4>)
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3304      	adds	r3, #4
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d110      	bne.n	8003e34 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003e12:	491d      	ldr	r1, [pc, #116]	; (8003e88 <chk_lock+0xd4>)
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3308      	adds	r3, #8
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d102      	bne.n	8003e34 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003e2e:	e007      	b.n	8003e40 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003e30:	2301      	movs	r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d9c3      	bls.n	8003dc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d109      	bne.n	8003e5a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <chk_lock+0x9e>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d101      	bne.n	8003e56 <chk_lock+0xa2>
 8003e52:	2300      	movs	r3, #0
 8003e54:	e013      	b.n	8003e7e <chk_lock+0xca>
 8003e56:	2312      	movs	r3, #18
 8003e58:	e011      	b.n	8003e7e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <chk_lock+0xc4>
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <chk_lock+0xd4>)
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	330a      	adds	r3, #10
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e76:	d101      	bne.n	8003e7c <chk_lock+0xc8>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	e000      	b.n	8003e7e <chk_lock+0xca>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000250 	.word	0x20000250

08003e8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e002      	b.n	8003e9e <enq_lock+0x12>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d809      	bhi.n	8003eb8 <enq_lock+0x2c>
 8003ea4:	490a      	ldr	r1, [pc, #40]	; (8003ed0 <enq_lock+0x44>)
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ef      	bne.n	8003e98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000250 	.word	0x20000250

08003ed4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e02b      	b.n	8003f3c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003ee4:	4955      	ldr	r1, [pc, #340]	; (800403c <inc_lock+0x168>)
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d11b      	bne.n	8003f36 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8003efe:	494f      	ldr	r1, [pc, #316]	; (800403c <inc_lock+0x168>)
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d10d      	bne.n	8003f36 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8003f1a:	4948      	ldr	r1, [pc, #288]	; (800403c <inc_lock+0x168>)
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3308      	adds	r3, #8
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d006      	beq.n	8003f44 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d9d0      	bls.n	8003ee4 <inc_lock+0x10>
 8003f42:	e000      	b.n	8003f46 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003f44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d145      	bne.n	8003fd8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e002      	b.n	8003f58 <inc_lock+0x84>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d809      	bhi.n	8003f72 <inc_lock+0x9e>
 8003f5e:	4937      	ldr	r1, [pc, #220]	; (800403c <inc_lock+0x168>)
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ef      	bne.n	8003f52 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d101      	bne.n	8003f7c <inc_lock+0xa8>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e05a      	b.n	8004032 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003f82:	482e      	ldr	r0, [pc, #184]	; (800403c <inc_lock+0x168>)
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4403      	add	r3, r0
 8003f90:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003f98:	4828      	ldr	r0, [pc, #160]	; (800403c <inc_lock+0x168>)
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003fb0:	4922      	ldr	r1, [pc, #136]	; (800403c <inc_lock+0x168>)
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003fc4:	491d      	ldr	r1, [pc, #116]	; (800403c <inc_lock+0x168>)
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	330a      	adds	r3, #10
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <inc_lock+0x124>
 8003fde:	4917      	ldr	r1, [pc, #92]	; (800403c <inc_lock+0x168>)
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	330a      	adds	r3, #10
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <inc_lock+0x124>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e01c      	b.n	8004032 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <inc_lock+0x142>
 8003ffe:	490f      	ldr	r1, [pc, #60]	; (800403c <inc_lock+0x168>)
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	330a      	adds	r3, #10
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	b299      	uxth	r1, r3
 8004014:	e001      	b.n	800401a <inc_lock+0x146>
 8004016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401a:	4808      	ldr	r0, [pc, #32]	; (800403c <inc_lock+0x168>)
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4403      	add	r3, r0
 8004028:	330a      	adds	r3, #10
 800402a:	460a      	mov	r2, r1
 800402c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3301      	adds	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	20000250 	.word	0x20000250

08004040 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e016      	b.n	800407c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800404e:	4910      	ldr	r1, [pc, #64]	; (8004090 <clear_lock+0x50>)
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d108      	bne.n	8004076 <clear_lock+0x36>
 8004064:	490a      	ldr	r1, [pc, #40]	; (8004090 <clear_lock+0x50>)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d9e5      	bls.n	800404e <clear_lock+0xe>
	}
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000250 	.word	0x20000250

08004094 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d038      	beq.n	800411c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80040b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	2301      	movs	r3, #1
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	f7ff fdc3 	bl	8003c48 <disk_write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <sync_window+0x3a>
			res = FR_DISK_ERR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	e026      	b.n	800411c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d218      	bcs.n	800411c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e010      	b.n	8004116 <sync_window+0x82>
					wsect += fs->fsize;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4413      	add	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	2301      	movs	r3, #1
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	f7ff fd9c 	bl	8003c48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3b01      	subs	r3, #1
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d8eb      	bhi.n	80040f4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d01b      	beq.n	8004178 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffa7 	bl	8004094 <sync_window>
 8004146:	4603      	mov	r3, r0
 8004148:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d113      	bne.n	8004178 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	2301      	movs	r3, #1
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	f7ff fd54 	bl	8003c08 <disk_read>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff82 	bl	8004094 <sync_window>
 8004190:	4603      	mov	r3, r0
 8004192:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 809b 	bne.w	80042d2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	f040 8088 	bne.w	80042b8 <sync_fs+0x136>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	f040 8082 	bne.w	80042b8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fd9f 	bl	8003d00 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2255      	movs	r2, #85	; 0x55
 80041c6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	22aa      	movs	r2, #170	; 0xaa
 80041ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2252      	movs	r2, #82	; 0x52
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2252      	movs	r2, #82	; 0x52
 80041dc:	705a      	strb	r2, [r3, #1]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2261      	movs	r2, #97	; 0x61
 80041e2:	709a      	strb	r2, [r3, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2241      	movs	r2, #65	; 0x41
 80041e8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2272      	movs	r2, #114	; 0x72
 80041ee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2272      	movs	r2, #114	; 0x72
 80041f6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2241      	movs	r2, #65	; 0x41
 80041fe:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2261      	movs	r2, #97	; 0x61
 8004206:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004210:	b2da      	uxtb	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800421e:	b29b      	uxth	r3, r3
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	b29b      	uxth	r3, r3
 8004224:	b2da      	uxtb	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004242:	0e1b      	lsrs	r3, r3, #24
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004252:	b2da      	uxtb	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004260:	b29b      	uxth	r3, r3
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2da      	uxtb	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80042aa:	2301      	movs	r3, #1
 80042ac:	f7ff fccc 	bl	8003c48 <disk_write>
			fs->fsi_flag = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fce0 	bl	8003c88 <disk_ioctl>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3b02      	subs	r3, #2
 80042ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042f2:	3b02      	subs	r3, #2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d301      	bcc.n	80042fe <clust2sect+0x22>
 80042fa:	2300      	movs	r3, #0
 80042fc:	e00a      	b.n	8004314 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004304:	461a      	mov	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	fb03 f202 	mul.w	r2, r3, r2
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004312:	4413      	add	r3, r2
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d905      	bls.n	800433a <get_fat+0x1c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <get_fat+0x22>
		val = 1;	/* Internal error */
 800433a:	2301      	movs	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e0a3      	b.n	8004488 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800434c:	2b03      	cmp	r3, #3
 800434e:	d068      	beq.n	8004422 <get_fat+0x104>
 8004350:	2b03      	cmp	r3, #3
 8004352:	f300 808f 	bgt.w	8004474 <get_fat+0x156>
 8004356:	2b01      	cmp	r3, #1
 8004358:	d002      	beq.n	8004360 <get_fat+0x42>
 800435a:	2b02      	cmp	r3, #2
 800435c:	d040      	beq.n	80043e0 <get_fat+0xc2>
 800435e:	e089      	b.n	8004474 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	0a5b      	lsrs	r3, r3, #9
 8004378:	4413      	add	r3, r2
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fed2 	bl	8004126 <move_window>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d178      	bne.n	800447a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	60fa      	str	r2, [r7, #12]
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	5cd3      	ldrb	r3, [r2, r3]
 8004396:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	4413      	add	r3, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff febd 	bl	8004126 <move_window>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d165      	bne.n	800447e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <get_fat+0xb8>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	e002      	b.n	80043dc <get_fat+0xbe>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043dc:	617b      	str	r3, [r7, #20]
			break;
 80043de:	e053      	b.n	8004488 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	4413      	add	r3, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fe99 	bl	8004126 <move_window>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d143      	bne.n	8004482 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3301      	adds	r3, #1
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	b21a      	sxth	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b21b      	sxth	r3, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	b21b      	sxth	r3, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	617b      	str	r3, [r7, #20]
			break;
 8004420:	e032      	b.n	8004488 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	09db      	lsrs	r3, r3, #7
 800442c:	4413      	add	r3, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fe78 	bl	8004126 <move_window>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d124      	bne.n	8004486 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3303      	adds	r3, #3
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	061a      	lsls	r2, r3, #24
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3302      	adds	r3, #2
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	4313      	orrs	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	3201      	adds	r2, #1
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	0212      	lsls	r2, r2, #8
 8004464:	4313      	orrs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004470:	617b      	str	r3, [r7, #20]
			break;
 8004472:	e009      	b.n	8004488 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e006      	b.n	8004488 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004486:	bf00      	nop
		}
	}

	return val;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d905      	bls.n	80044b0 <put_fat+0x1e>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <put_fat+0x24>
		res = FR_INT_ERR;
 80044b0:	2302      	movs	r3, #2
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0f6      	b.n	80046a4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044bc:	2b03      	cmp	r3, #3
 80044be:	f000 809e 	beq.w	80045fe <put_fat+0x16c>
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	f300 80e4 	bgt.w	8004690 <put_fat+0x1fe>
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d002      	beq.n	80044d2 <put_fat+0x40>
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d06f      	beq.n	80045b0 <put_fat+0x11e>
 80044d0:	e0de      	b.n	8004690 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	4413      	add	r3, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fe19 	bl	8004126 <move_window>
 80044f4:	4603      	mov	r3, r0
 80044f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044f8:	7ffb      	ldrb	r3, [r7, #31]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 80cb 	bne.w	8004696 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	617a      	str	r2, [r7, #20]
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <put_fat+0xa4>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b25a      	sxtb	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	b25b      	sxtb	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b25b      	sxtb	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e001      	b.n	800453a <put_fat+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	4413      	add	r3, r2
 8004552:	4619      	mov	r1, r3
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fde6 	bl	8004126 <move_window>
 800455a:	4603      	mov	r3, r0
 800455c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 809a 	bne.w	800469a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <put_fat+0xf2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e00e      	b.n	80045a2 <put_fat+0x110>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b25b      	sxtb	r3, r3
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	b25a      	sxtb	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	b25b      	sxtb	r3, r3
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	b25b      	sxtb	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b25b      	sxtb	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80045ae:	e079      	b.n	80046a4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	4413      	add	r3, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fdb1 	bl	8004126 <move_window>
 80045c4:	4603      	mov	r3, r0
 80045c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d167      	bne.n	800469e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	3301      	adds	r3, #1
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80045fc:	e052      	b.n	80046a4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	4413      	add	r3, r2
 800460a:	4619      	mov	r1, r3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fd8a 	bl	8004126 <move_window>
 8004612:	4603      	mov	r3, r0
 8004614:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d142      	bne.n	80046a2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3303      	adds	r3, #3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	061a      	lsls	r2, r3, #24
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3302      	adds	r3, #2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	4313      	orrs	r3, r2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	3201      	adds	r2, #1
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	0212      	lsls	r2, r2, #8
 8004644:	4313      	orrs	r3, r2
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	4313      	orrs	r3, r2
 800464c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4313      	orrs	r3, r2
 8004654:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	b29b      	uxth	r3, r3
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	b29a      	uxth	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3301      	adds	r3, #1
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0c1a      	lsrs	r2, r3, #16
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0e1a      	lsrs	r2, r3, #24
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3303      	adds	r3, #3
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800468e:	e009      	b.n	80046a4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8004690:	2302      	movs	r3, #2
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e006      	b.n	80046a4 <put_fat+0x212>
			if (res != FR_OK) break;
 8004696:	bf00      	nop
 8004698:	e004      	b.n	80046a4 <put_fat+0x212>
			if (res != FR_OK) break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <put_fat+0x212>
			if (res != FR_OK) break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <put_fat+0x212>
			if (res != FR_OK) break;
 80046a2:	bf00      	nop
		}
	}

	return res;
 80046a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d905      	bls.n	80046ca <remove_chain+0x1c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <remove_chain+0x22>
		res = FR_INT_ERR;
 80046ca:	2302      	movs	r3, #2
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e043      	b.n	8004758 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80046d4:	e036      	b.n	8004744 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fe20 	bl	800431e <get_fat>
 80046de:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d035      	beq.n	8004752 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <remove_chain+0x44>
 80046ec:	2302      	movs	r3, #2
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e032      	b.n	8004758 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d102      	bne.n	8004700 <remove_chain+0x52>
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	e02b      	b.n	8004758 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004700:	2200      	movs	r2, #0
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fec4 	bl	8004492 <put_fat>
 800470a:	4603      	mov	r3, r0
 800470c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d120      	bne.n	8004756 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d00f      	beq.n	8004740 <remove_chain+0x92>
				fs->free_clust++;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3c2      	bcc.n	80046d6 <remove_chain+0x28>
 8004750:	e002      	b.n	8004758 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004756:	bf00      	nop
		}
	}

	return res;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004778:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <create_chain+0x2a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d31c      	bcc.n	80047c6 <create_chain+0x64>
 800478c:	2301      	movs	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e019      	b.n	80047c6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fdc2 	bl	800431e <get_fat>
 800479a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d801      	bhi.n	80047a6 <create_chain+0x44>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e076      	b.n	8004894 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d101      	bne.n	80047b2 <create_chain+0x50>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	e070      	b.n	8004894 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d201      	bcs.n	80047c2 <create_chain+0x60>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	e068      	b.n	8004894 <create_chain+0x132>
		scl = clst;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	3301      	adds	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d307      	bcc.n	80047ec <create_chain+0x8a>
			ncl = 2;
 80047dc:	2302      	movs	r3, #2
 80047de:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d901      	bls.n	80047ec <create_chain+0x8a>
 80047e8:	2300      	movs	r3, #0
 80047ea:	e053      	b.n	8004894 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fd95 	bl	800431e <get_fat>
 80047f4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d002      	beq.n	800480a <create_chain+0xa8>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <create_chain+0xac>
			return cs;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	e042      	b.n	8004894 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	429a      	cmp	r2, r3
 8004814:	d1d9      	bne.n	80047ca <create_chain+0x68>
 8004816:	2300      	movs	r3, #0
 8004818:	e03c      	b.n	8004894 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800481a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800481c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fe35 	bl	8004492 <put_fat>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <create_chain+0xe4>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fe28 	bl	8004492 <put_fat>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11a      	bne.n	8004882 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d018      	beq.n	8004892 <create_chain+0x130>
			fs->free_clust--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	b2da      	uxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004880:	e007      	b.n	8004892 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d102      	bne.n	800488e <create_chain+0x12c>
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e000      	b.n	8004890 <create_chain+0x12e>
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80048ac:	3304      	adds	r3, #4
 80048ae:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80048ba:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80048be:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1d1a      	adds	r2, r3, #4
 80048c8:	613a      	str	r2, [r7, #16]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <clmt_clust+0x3c>
 80048d4:	2300      	movs	r3, #0
 80048d6:	e010      	b.n	80048fa <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d307      	bcc.n	80048f0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3304      	adds	r3, #4
 80048ec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048ee:	e7e9      	b.n	80048c4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80048f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4413      	add	r3, r2
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800491e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d007      	beq.n	8004936 <dir_sdi+0x32>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800492c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	429a      	cmp	r2, r3
 8004934:	d301      	bcc.n	800493a <dir_sdi+0x36>
		return FR_INT_ERR;
 8004936:	2302      	movs	r3, #2
 8004938:	e074      	b.n	8004a24 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <dir_sdi+0x56>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004946:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800494a:	2b03      	cmp	r3, #3
 800494c:	d105      	bne.n	800495a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004954:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004958:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004966:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800496a:	461a      	mov	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4293      	cmp	r3, r2
 8004970:	d301      	bcc.n	8004976 <dir_sdi+0x72>
			return FR_INT_ERR;
 8004972:	2302      	movs	r3, #2
 8004974:	e056      	b.n	8004a24 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800497c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	e032      	b.n	80049ea <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800498a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004992:	e01e      	b.n	80049d2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fcbe 	bl	800431e <get_fat>
 80049a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d101      	bne.n	80049b0 <dir_sdi+0xac>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e039      	b.n	8004a24 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d907      	bls.n	80049c6 <dir_sdi+0xc2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d301      	bcc.n	80049ca <dir_sdi+0xc6>
				return FR_INT_ERR;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e02c      	b.n	8004a24 <dir_sdi+0x120>
			idx -= ic;
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d2dc      	bcs.n	8004994 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fc7a 	bl	80042dc <clust2sect>
 80049e8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <dir_sdi+0xf8>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e013      	b.n	8004a24 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	091a      	lsrs	r2, r3, #4
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a10:	461a      	mov	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	015b      	lsls	r3, r3, #5
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <dir_next+0x26>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <dir_next+0x2a>
		return FR_NO_FILE;
 8004a52:	2304      	movs	r3, #4
 8004a54:	e0dd      	b.n	8004c12 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 80c6 	bne.w	8004bee <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a80:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004a84:	461a      	mov	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f0c0 80b0 	bcc.w	8004bee <dir_next+0x1c2>
				return FR_NO_FILE;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	e0bf      	b.n	8004c12 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004a9c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 80a2 	bne.w	8004bee <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7ff fc30 	bl	800431e <get_fat>
 8004abe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d801      	bhi.n	8004aca <dir_next+0x9e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0a3      	b.n	8004c12 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d101      	bne.n	8004ad6 <dir_next+0xaa>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e09d      	b.n	8004c12 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004adc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d374      	bcc.n	8004bd0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <dir_next+0xc4>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e090      	b.n	8004c12 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7ff fe2f 	bl	8004762 <create_chain>
 8004b04:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <dir_next+0xe4>
 8004b0c:	2307      	movs	r3, #7
 8004b0e:	e080      	b.n	8004c12 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <dir_next+0xee>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e07b      	b.n	8004c12 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d101      	bne.n	8004b26 <dir_next+0xfa>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e075      	b.n	8004c12 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fab1 	bl	8004094 <sync_window>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <dir_next+0x110>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e06a      	b.n	8004c12 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff f8d9 	bl	8003d00 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8004b5a:	6979      	ldr	r1, [r7, #20]
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f7ff fbbd 	bl	80042dc <clust2sect>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e01b      	b.n	8004ba6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fa87 	bl	8004094 <sync_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <dir_next+0x164>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e040      	b.n	8004c12 <dir_next+0x1e6>
						dp->fs->winsect++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b96:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004b9a:	3201      	adds	r2, #1
 8004b9c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d3da      	bcc.n	8004b6e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bbe:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	1a8a      	subs	r2, r1, r2
 8004bcc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fb7b 	bl	80042dc <clust2sect>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	015b      	lsls	r3, r3, #5
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}

08004c1a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004c24:	2100      	movs	r1, #0
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fe6c 	bl	8004904 <dir_sdi>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d131      	bne.n	8004c9a <dir_alloc+0x80>
		n = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7ff fa6c 	bl	8004126 <move_window>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11f      	bne.n	8004c98 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2be5      	cmp	r3, #229	; 0xe5
 8004c62:	d005      	beq.n	8004c70 <dir_alloc+0x56>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d102      	bne.n	8004c84 <dir_alloc+0x6a>
 8004c7e:	e00c      	b.n	8004c9a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fed0 	bl	8004a2c <dir_next>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0d1      	beq.n	8004c3a <dir_alloc+0x20>
 8004c96:	e000      	b.n	8004c9a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8004c98:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d101      	bne.n	8004ca4 <dir_alloc+0x8a>
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	73fb      	strb	r3, [r7, #15]
	return res;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	331b      	adds	r3, #27
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	b21a      	sxth	r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	331a      	adds	r3, #26
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d10f      	bne.n	8004cfc <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	3315      	adds	r3, #21
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

	return cl;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	331a      	adds	r3, #26
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	331b      	adds	r3, #27
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	0c1a      	lsrs	r2, r3, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3314      	adds	r3, #20
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3315      	adds	r3, #21
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fdd0 	bl	8004904 <dir_sdi>
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <dir_find+0x1e>
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	e03b      	b.n	8004dea <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff f9d0 	bl	8004126 <move_window>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d128      	bne.n	8004de2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d96:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <dir_find+0x56>
 8004da4:	2304      	movs	r3, #4
 8004da6:	75fb      	strb	r3, [r7, #23]
 8004da8:	e01e      	b.n	8004de8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	330b      	adds	r3, #11
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <dir_find+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004dbe:	220b      	movs	r2, #11
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6938      	ldr	r0, [r7, #16]
 8004dc4:	f7fe ffb6 	bl	8003d34 <mem_cmp>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004dce:	2100      	movs	r1, #0
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fe2b 	bl	8004a2c <dir_next>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0c8      	beq.n	8004d72 <dir_find+0x1e>
 8004de0:	e002      	b.n	8004de8 <dir_find+0x94>
		if (res != FR_OK) break;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <dir_find+0x94>
			break;
 8004de6:	bf00      	nop

	return res;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff0c 	bl	8004c1a <dir_alloc>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d126      	bne.n	8004e5a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7ff f983 	bl	8004126 <move_window>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d117      	bne.n	8004e5a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e30:	2220      	movs	r2, #32
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe ff63 	bl	8003d00 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e46:	220b      	movs	r2, #11
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fe ff3b 	bl	8003cc4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e002      	b.n	8004e7c <create_name+0x18>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b2f      	cmp	r3, #47	; 0x2f
 8004e82:	d0f8      	beq.n	8004e76 <create_name+0x12>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b5c      	cmp	r3, #92	; 0x5c
 8004e8a:	d0f4      	beq.n	8004e76 <create_name+0x12>
	sfn = dp->fn;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e92:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004e94:	220b      	movs	r2, #11
 8004e96:	2120      	movs	r1, #32
 8004e98:	68b8      	ldr	r0, [r7, #8]
 8004e9a:	f7fe ff31 	bl	8003d00 <mem_set>
	si = i = b = 0; ni = 8;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	2308      	movs	r3, #8
 8004eac:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	617a      	str	r2, [r7, #20]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004ebc:	7fbb      	ldrb	r3, [r7, #30]
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d953      	bls.n	8004f6a <create_name+0x106>
 8004ec2:	7fbb      	ldrb	r3, [r7, #30]
 8004ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ec6:	d050      	beq.n	8004f6a <create_name+0x106>
 8004ec8:	7fbb      	ldrb	r3, [r7, #30]
 8004eca:	2b5c      	cmp	r3, #92	; 0x5c
 8004ecc:	d04d      	beq.n	8004f6a <create_name+0x106>
		if (c == '.' || i >= ni) {
 8004ece:	7fbb      	ldrb	r3, [r7, #30]
 8004ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed2:	d003      	beq.n	8004edc <create_name+0x78>
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d30f      	bcc.n	8004efc <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d102      	bne.n	8004ee8 <create_name+0x84>
 8004ee2:	7fbb      	ldrb	r3, [r7, #30]
 8004ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ee6:	d001      	beq.n	8004eec <create_name+0x88>
 8004ee8:	2306      	movs	r3, #6
 8004eea:	e073      	b.n	8004fd4 <create_name+0x170>
			i = 8; ni = 11;
 8004eec:	2308      	movs	r3, #8
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	230b      	movs	r3, #11
 8004ef2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e035      	b.n	8004f68 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004efc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da08      	bge.n	8004f16 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	f043 0303 	orr.w	r3, r3, #3
 8004f0a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004f0c:	7fbb      	ldrb	r3, [r7, #30]
 8004f0e:	3b80      	subs	r3, #128	; 0x80
 8004f10:	4a32      	ldr	r2, [pc, #200]	; (8004fdc <create_name+0x178>)
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
 8004f14:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004f16:	7fbb      	ldrb	r3, [r7, #30]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4831      	ldr	r0, [pc, #196]	; (8004fe0 <create_name+0x17c>)
 8004f1c:	f7fe ff30 	bl	8003d80 <chk_chr>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <create_name+0xc6>
				return FR_INVALID_NAME;
 8004f26:	2306      	movs	r3, #6
 8004f28:	e054      	b.n	8004fd4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004f2a:	7fbb      	ldrb	r3, [r7, #30]
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d907      	bls.n	8004f40 <create_name+0xdc>
 8004f30:	7fbb      	ldrb	r3, [r7, #30]
 8004f32:	2b5a      	cmp	r3, #90	; 0x5a
 8004f34:	d804      	bhi.n	8004f40 <create_name+0xdc>
				b |= 2;
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e00c      	b.n	8004f5a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004f40:	7fbb      	ldrb	r3, [r7, #30]
 8004f42:	2b60      	cmp	r3, #96	; 0x60
 8004f44:	d909      	bls.n	8004f5a <create_name+0xf6>
 8004f46:	7fbb      	ldrb	r3, [r7, #30]
 8004f48:	2b7a      	cmp	r3, #122	; 0x7a
 8004f4a:	d806      	bhi.n	8004f5a <create_name+0xf6>
					b |= 1; c -= 0x20;
 8004f4c:	7ffb      	ldrb	r3, [r7, #31]
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	7fbb      	ldrb	r3, [r7, #30]
 8004f56:	3b20      	subs	r3, #32
 8004f58:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	613a      	str	r2, [r7, #16]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	4413      	add	r3, r2
 8004f64:	7fba      	ldrb	r2, [r7, #30]
 8004f66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004f68:	e7a1      	b.n	8004eae <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	441a      	add	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f74:	7fbb      	ldrb	r3, [r7, #30]
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d801      	bhi.n	8004f7e <create_name+0x11a>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e000      	b.n	8004f80 <create_name+0x11c>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <create_name+0x128>
 8004f88:	2306      	movs	r3, #6
 8004f8a:	e023      	b.n	8004fd4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2be5      	cmp	r3, #229	; 0xe5
 8004f92:	d102      	bne.n	8004f9a <create_name+0x136>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2205      	movs	r2, #5
 8004f98:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d102      	bne.n	8004fa6 <create_name+0x142>
 8004fa0:	7ffb      	ldrb	r3, [r7, #31]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d103      	bne.n	8004fb8 <create_name+0x154>
 8004fb0:	7fbb      	ldrb	r3, [r7, #30]
 8004fb2:	f043 0310 	orr.w	r3, r3, #16
 8004fb6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004fb8:	7ffb      	ldrb	r3, [r7, #31]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d103      	bne.n	8004fca <create_name+0x166>
 8004fc2:	7fbb      	ldrb	r3, [r7, #30]
 8004fc4:	f043 0308 	orr.w	r3, r3, #8
 8004fc8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	330b      	adds	r3, #11
 8004fce:	7fba      	ldrb	r2, [r7, #30]
 8004fd0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004fd2:	2300      	movs	r3, #0
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08007084 	.word	0x08007084
 8004fe0:	08007028 	.word	0x08007028

08004fe4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8004ff4:	d003      	beq.n	8004ffe <follow_path+0x1a>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b5c      	cmp	r3, #92	; 0x5c
 8004ffc:	d102      	bne.n	8005004 <follow_path+0x20>
		path++;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b1f      	cmp	r3, #31
 8005012:	d80a      	bhi.n	800502a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fc74 	bl	8004904 <dir_sdi>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005028:	e045      	b.n	80050b6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800502a:	463b      	mov	r3, r7
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ff18 	bl	8004e64 <create_name>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d136      	bne.n	80050ac <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe88 	bl	8004d54 <dir_find>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800504e:	7adb      	ldrb	r3, [r3, #11]
 8005050:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d128      	bne.n	80050b0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d123      	bne.n	80050b0 <follow_path+0xcc>
 8005068:	2305      	movs	r3, #5
 800506a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800506c:	e020      	b.n	80050b0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800506e:	7bbb      	ldrb	r3, [r7, #14]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11d      	bne.n	80050b4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800507e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	330b      	adds	r3, #11
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800508e:	2305      	movs	r3, #5
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e010      	b.n	80050b6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fe06 	bl	8004cae <ld_clust>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050aa:	e7be      	b.n	800502a <follow_path+0x46>
			if (res != FR_OK) break;
 80050ac:	bf00      	nop
 80050ae:	e002      	b.n	80050b6 <follow_path+0xd2>
				break;
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050b4:	bf00      	nop
		}
	}

	return res;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d031      	beq.n	800513a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e002      	b.n	80050e4 <get_ldnumber+0x24>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	3301      	adds	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d903      	bls.n	80050f4 <get_ldnumber+0x34>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b3a      	cmp	r3, #58	; 0x3a
 80050f2:	d1f4      	bne.n	80050de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b3a      	cmp	r3, #58	; 0x3a
 80050fa:	d11c      	bne.n	8005136 <get_ldnumber+0x76>
			tp = *path;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	3b30      	subs	r3, #48	; 0x30
 800510c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b09      	cmp	r3, #9
 8005112:	d80e      	bhi.n	8005132 <get_ldnumber+0x72>
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d10a      	bne.n	8005132 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d107      	bne.n	8005132 <get_ldnumber+0x72>
					vol = (int)i;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	e002      	b.n	800513c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800513a:	693b      	ldr	r3, [r7, #16]
}
 800513c:	4618      	mov	r0, r3
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
	...

08005148 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe ffdd 	bl	8004126 <move_window>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <check_fs+0x2e>
		return 3;
 8005172:	2303      	movs	r3, #3
 8005174:	e04a      	b.n	800520c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800517c:	3301      	adds	r3, #1
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	b21a      	sxth	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800518a:	b21b      	sxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b21b      	sxth	r3, r3
 8005190:	4a20      	ldr	r2, [pc, #128]	; (8005214 <check_fs+0xcc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d001      	beq.n	800519a <check_fs+0x52>
		return 2;
 8005196:	2302      	movs	r3, #2
 8005198:	e038      	b.n	800520c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3336      	adds	r3, #54	; 0x36
 800519e:	3303      	adds	r3, #3
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	061a      	lsls	r2, r3, #24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3336      	adds	r3, #54	; 0x36
 80051a8:	3302      	adds	r3, #2
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	4313      	orrs	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	3236      	adds	r2, #54	; 0x36
 80051b4:	3201      	adds	r2, #1
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	0212      	lsls	r2, r2, #8
 80051ba:	4313      	orrs	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <check_fs+0xd0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <check_fs+0x8a>
		return 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e01c      	b.n	800520c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3352      	adds	r3, #82	; 0x52
 80051d6:	3303      	adds	r3, #3
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	061a      	lsls	r2, r3, #24
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3352      	adds	r3, #82	; 0x52
 80051e0:	3302      	adds	r3, #2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	4313      	orrs	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	3252      	adds	r2, #82	; 0x52
 80051ec:	3201      	adds	r2, #1
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	0212      	lsls	r2, r2, #8
 80051f2:	4313      	orrs	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005200:	4a05      	ldr	r2, [pc, #20]	; (8005218 <check_fs+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <check_fs+0xc2>
		return 0;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <check_fs+0xc4>

	return 1;
 800520a:	2301      	movs	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	ffffaa55 	.word	0xffffaa55
 8005218:	00544146 	.word	0x00544146

0800521c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b096      	sub	sp, #88	; 0x58
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005230:	68b8      	ldr	r0, [r7, #8]
 8005232:	f7ff ff45 	bl	80050c0 <get_ldnumber>
 8005236:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	da01      	bge.n	8005242 <find_volume+0x26>
 800523e:	230b      	movs	r3, #11
 8005240:	e2a8      	b.n	8005794 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005242:	4a9d      	ldr	r2, [pc, #628]	; (80054b8 <find_volume+0x29c>)
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <find_volume+0x3a>
 8005252:	230c      	movs	r3, #12
 8005254:	e29e      	b.n	8005794 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01b      	beq.n	800529e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fc8b 	bl	8003b88 <disk_status>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10c      	bne.n	800529e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <find_volume+0x7e>
 800528a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8005296:	230a      	movs	r3, #10
 8005298:	e27c      	b.n	8005794 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800529a:	2300      	movs	r3, #0
 800529c:	e27a      	b.n	8005794 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fc80 	bl	8003bbc <disk_initialize>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80052c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80052ce:	2303      	movs	r3, #3
 80052d0:	e260      	b.n	8005794 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <find_volume+0xcc>
 80052d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80052e4:	230a      	movs	r3, #10
 80052e6:	e255      	b.n	8005794 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80052ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052f0:	f7ff ff2a 	bl	8005148 <check_fs>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80052fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d153      	bne.n	80053aa <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005302:	2300      	movs	r3, #0
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	e028      	b.n	800535a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005312:	4413      	add	r3, r2
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	3304      	adds	r3, #4
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d012      	beq.n	8005346 <find_volume+0x12a>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	330b      	adds	r3, #11
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	061a      	lsls	r2, r3, #24
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	330a      	adds	r3, #10
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	4313      	orrs	r3, r2
 8005332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005334:	3209      	adds	r2, #9
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	0212      	lsls	r2, r2, #8
 800533a:	4313      	orrs	r3, r2
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	3208      	adds	r2, #8
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	431a      	orrs	r2, r3
 8005344:	e000      	b.n	8005348 <find_volume+0x12c>
 8005346:	2200      	movs	r2, #0
 8005348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	3358      	adds	r3, #88	; 0x58
 800534e:	443b      	add	r3, r7
 8005350:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	3301      	adds	r3, #1
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
 800535a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535c:	2b03      	cmp	r3, #3
 800535e:	d9d3      	bls.n	8005308 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005360:	2300      	movs	r3, #0
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <find_volume+0x154>
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	3b01      	subs	r3, #1
 800536e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	3358      	adds	r3, #88	; 0x58
 8005376:	443b      	add	r3, r7
 8005378:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800537c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800537e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <find_volume+0x174>
 8005384:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005386:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005388:	f7ff fede 	bl	8005148 <check_fs>
 800538c:	4603      	mov	r3, r0
 800538e:	e000      	b.n	8005392 <find_volume+0x176>
 8005390:	2302      	movs	r3, #2
 8005392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <find_volume+0x18e>
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	3301      	adds	r3, #1
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d9e2      	bls.n	8005370 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80053aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d101      	bne.n	80053b6 <find_volume+0x19a>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e1ee      	b.n	8005794 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80053b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <find_volume+0x1a6>
 80053be:	230d      	movs	r3, #13
 80053c0:	e1e8      	b.n	8005794 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	7b1b      	ldrb	r3, [r3, #12]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	b21a      	sxth	r2, r3
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	7adb      	ldrb	r3, [r3, #11]
 80053ce:	b21b      	sxth	r3, r3
 80053d0:	4313      	orrs	r3, r2
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d8:	d001      	beq.n	80053de <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80053da:	230d      	movs	r3, #13
 80053dc:	e1da      	b.n	8005794 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	7ddb      	ldrb	r3, [r3, #23]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	b21a      	sxth	r2, r3
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	7d9b      	ldrb	r3, [r3, #22]
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d112      	bne.n	8005420 <find_volume+0x204>
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005400:	061a      	lsls	r2, r3, #24
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	4313      	orrs	r3, r2
 800540c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800540e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005412:	0212      	lsls	r2, r2, #8
 8005414:	4313      	orrs	r3, r2
 8005416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005418:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800541c:	4313      	orrs	r3, r2
 800541e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005424:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	7c1a      	ldrb	r2, [r3, #16]
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005438:	2b01      	cmp	r3, #1
 800543a:	d006      	beq.n	800544a <find_volume+0x22e>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005442:	2b02      	cmp	r3, #2
 8005444:	d001      	beq.n	800544a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8005446:	230d      	movs	r3, #13
 8005448:	e1a4      	b.n	8005794 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005450:	461a      	mov	r2, r3
 8005452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	7b5a      	ldrb	r2, [r3, #13]
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <find_volume+0x268>
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005474:	461a      	mov	r2, r3
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800547c:	3b01      	subs	r3, #1
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005484:	230d      	movs	r3, #13
 8005486:	e185      	b.n	8005794 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	7c9b      	ldrb	r3, [r3, #18]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21a      	sxth	r2, r3
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	7c5b      	ldrb	r3, [r3, #17]
 8005494:	b21b      	sxth	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b21b      	sxth	r3, r3
 800549a:	b29a      	uxth	r2, r3
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80054b2:	230d      	movs	r3, #13
 80054b4:	e16e      	b.n	8005794 <find_volume+0x578>
 80054b6:	bf00      	nop
 80054b8:	20000248 	.word	0x20000248

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	7d1b      	ldrb	r3, [r3, #20]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	b21a      	sxth	r2, r3
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	7cdb      	ldrb	r3, [r3, #19]
 80054c8:	b21b      	sxth	r3, r3
 80054ca:	4313      	orrs	r3, r2
 80054cc:	b21b      	sxth	r3, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80054d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d112      	bne.n	80054fe <find_volume+0x2e2>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80054de:	061a      	lsls	r2, r3, #24
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	4313      	orrs	r3, r2
 80054ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ec:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80054f0:	0212      	lsls	r2, r2, #8
 80054f2:	4313      	orrs	r3, r2
 80054f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	7bdb      	ldrb	r3, [r3, #15]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	b21a      	sxth	r2, r3
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	7b9b      	ldrb	r3, [r3, #14]
 800550a:	b21b      	sxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	b21b      	sxth	r3, r3
 8005510:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <find_volume+0x300>
 8005518:	230d      	movs	r3, #13
 800551a:	e13b      	b.n	8005794 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800551c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	4413      	add	r3, r2
 8005522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005524:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005528:	0912      	lsrs	r2, r2, #4
 800552a:	b292      	uxth	r2, r2
 800552c:	4413      	add	r3, r2
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	429a      	cmp	r2, r3
 8005536:	d201      	bcs.n	800553c <find_volume+0x320>
 8005538:	230d      	movs	r3, #13
 800553a:	e12b      	b.n	8005794 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005544:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005548:	fbb3 f3f2 	udiv	r3, r3, r2
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <find_volume+0x33c>
 8005554:	230d      	movs	r3, #13
 8005556:	e11d      	b.n	8005794 <find_volume+0x578>
	fmt = FS_FAT12;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005564:	4293      	cmp	r3, r2
 8005566:	d902      	bls.n	800556e <find_volume+0x352>
 8005568:	2302      	movs	r3, #2
 800556a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005574:	4293      	cmp	r3, r2
 8005576:	d902      	bls.n	800557e <find_volume+0x362>
 8005578:	2303      	movs	r3, #3
 800557a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800558c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005590:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005594:	441a      	add	r2, r3
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800559c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	441a      	add	r2, r3
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80055a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d121      	bne.n	80055f4 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <find_volume+0x3a2>
 80055ba:	230d      	movs	r3, #13
 80055bc:	e0ea      	b.n	8005794 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055c4:	061a      	lsls	r2, r3, #24
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4313      	orrs	r3, r2
 80055d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80055d6:	0212      	lsls	r2, r2, #8
 80055d8:	4313      	orrs	r3, r2
 80055da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055dc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80055e0:	431a      	orrs	r2, r3
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
 80055f2:	e025      	b.n	8005640 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <find_volume+0x3e6>
 80055fe:	230d      	movs	r3, #13
 8005600:	e0c8      	b.n	8005794 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	441a      	add	r2, r3
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005616:	2b02      	cmp	r3, #2
 8005618:	d104      	bne.n	8005624 <find_volume+0x408>
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	e00c      	b.n	800563e <find_volume+0x422>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800562a:	4613      	mov	r3, r2
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4413      	add	r3, r2
 8005630:	085a      	lsrs	r2, r3, #1
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800563e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005648:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800564c:	0a5b      	lsrs	r3, r3, #9
 800564e:	429a      	cmp	r2, r3
 8005650:	d201      	bcs.n	8005656 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005652:	230d      	movs	r3, #13
 8005654:	e09e      	b.n	8005794 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005678:	2b03      	cmp	r3, #3
 800567a:	d177      	bne.n	800576c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	b21a      	sxth	r2, r3
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800568c:	b21b      	sxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b21b      	sxth	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	d16a      	bne.n	800576c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	3301      	adds	r3, #1
 800569a:	4619      	mov	r1, r3
 800569c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800569e:	f7fe fd42 	bl	8004126 <move_window>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d161      	bne.n	800576c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	b21a      	sxth	r2, r3
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80056c0:	b21b      	sxth	r3, r3
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	4a35      	ldr	r2, [pc, #212]	; (800579c <find_volume+0x580>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d14f      	bne.n	800576c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	061a      	lsls	r2, r3, #24
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	4313      	orrs	r3, r2
 80056da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056dc:	7852      	ldrb	r2, [r2, #1]
 80056de:	0212      	lsls	r2, r2, #8
 80056e0:	4313      	orrs	r3, r2
 80056e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	4a2d      	ldr	r2, [pc, #180]	; (80057a0 <find_volume+0x584>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d13e      	bne.n	800576c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80056f4:	061a      	lsls	r2, r3, #24
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	4313      	orrs	r3, r2
 8005700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005702:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005706:	0212      	lsls	r2, r2, #8
 8005708:	4313      	orrs	r3, r2
 800570a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800570c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005710:	4313      	orrs	r3, r2
 8005712:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <find_volume+0x588>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d129      	bne.n	800576c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800571e:	061a      	lsls	r2, r3, #24
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	4313      	orrs	r3, r2
 800572a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800572c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005730:	0212      	lsls	r2, r2, #8
 8005732:	4313      	orrs	r3, r2
 8005734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005736:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800573a:	431a      	orrs	r2, r3
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005748:	061a      	lsls	r2, r3, #24
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	4313      	orrs	r3, r2
 8005754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005756:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800575a:	0212      	lsls	r2, r2, #8
 800575c:	4313      	orrs	r3, r2
 800575e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005760:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005764:	431a      	orrs	r2, r3
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005772:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <find_volume+0x58c>)
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <find_volume+0x58c>)
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <find_volume+0x58c>)
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800578c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800578e:	f7fe fc57 	bl	8004040 <clear_lock>
#endif

	return FR_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3758      	adds	r7, #88	; 0x58
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffffaa55 	.word	0xffffaa55
 80057a0:	41615252 	.word	0x41615252
 80057a4:	61417272 	.word	0x61417272
 80057a8:	2000024c 	.word	0x2000024c

080057ac <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d022      	beq.n	8005804 <validate+0x58>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01d      	beq.n	8005804 <validate+0x58>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <validate+0x58>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057dc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d10c      	bne.n	8005804 <validate+0x58>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057f0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe f9c7 	bl	8003b88 <disk_status>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005804:	2309      	movs	r3, #9
 8005806:	e000      	b.n	800580a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005826:	f107 0310 	add.w	r3, r7, #16
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fc48 	bl	80050c0 <get_ldnumber>
 8005830:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da01      	bge.n	800583c <f_mount+0x28>
 8005838:	230b      	movs	r3, #11
 800583a:	e02d      	b.n	8005898 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <f_mount+0x8c>)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005844:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800584c:	69b8      	ldr	r0, [r7, #24]
 800584e:	f7fe fbf7 	bl	8004040 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	490d      	ldr	r1, [pc, #52]	; (80058a0 <f_mount+0x8c>)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <f_mount+0x6a>
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d001      	beq.n	8005882 <f_mount+0x6e>
 800587e:	2300      	movs	r3, #0
 8005880:	e00a      	b.n	8005898 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005882:	f107 0108 	add.w	r1, r7, #8
 8005886:	f107 030c 	add.w	r3, r7, #12
 800588a:	2200      	movs	r2, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fcc5 	bl	800521c <find_volume>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000248 	.word	0x20000248

080058a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058b4:	6018      	str	r0, [r3, #0]
 80058b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058ba:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80058be:	6019      	str	r1, [r3, #0]
 80058c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058c4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80058c8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80058ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058ce:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <f_open+0x38>
 80058d8:	2309      	movs	r3, #9
 80058da:	e257      	b.n	8005d8c <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 80058dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058e0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80058ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058f0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80058f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80058f8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	f002 021f 	and.w	r2, r2, #31
 8005902:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005908:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	f107 0108 	add.w	r1, r7, #8
 8005918:	f107 0320 	add.w	r3, r7, #32
 800591c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fc7b 	bl	800521c <find_volume>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800592c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 8229 	bne.w	8005d88 <f_open+0x4e4>
		INIT_BUF(dj);
 8005936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800593a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800593e:	f107 0214 	add.w	r2, r7, #20
 8005942:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800594a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f107 0320 	add.w	r3, r7, #32
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fb44 	bl	8004fe4 <follow_path>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005966:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800596a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800596e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005972:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11d      	bne.n	80059b6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800597a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005982:	2306      	movs	r3, #6
 8005984:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005988:	e015      	b.n	80059b6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800598a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800598e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	f107 0320 	add.w	r3, r7, #32
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe fa02 	bl	8003db4 <chk_lock>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80059b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059ba:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f003 031c 	and.w	r3, r3, #28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80e6 	beq.w	8005b96 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80059ca:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d027      	beq.n	8005a22 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80059d2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d10e      	bne.n	80059f8 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80059da:	f7fe fa57 	bl	8003e8c <enq_lock>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <f_open+0x14e>
 80059e4:	f107 0320 	add.w	r3, r7, #32
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fa02 	bl	8004df2 <dir_register>
 80059ee:	4603      	mov	r3, r0
 80059f0:	e000      	b.n	80059f4 <f_open+0x150>
 80059f2:	2312      	movs	r3, #18
 80059f4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80059f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059fc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005a00:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005a04:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	f042 0208 	orr.w	r2, r2, #8
 8005a0e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005a18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a1c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005a20:	e017      	b.n	8005a52 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a22:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005a26:	330b      	adds	r3, #11
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	f003 0311 	and.w	r3, r3, #17
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <f_open+0x196>
					res = FR_DENIED;
 8005a32:	2307      	movs	r3, #7
 8005a34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005a38:	e00b      	b.n	8005a52 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a3e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <f_open+0x1ae>
						res = FR_EXIST;
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a52:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 80c1 	bne.w	8005bde <f_open+0x33a>
 8005a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a60:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80b7 	beq.w	8005bde <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8005a70:	f7fd fb4c 	bl	800310c <get_fattime>
 8005a74:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005a78:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005a7c:	330e      	adds	r3, #14
 8005a7e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005a94:	330f      	adds	r3, #15
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005a9e:	0c1a      	lsrs	r2, r3, #16
 8005aa0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005aa4:	3310      	adds	r3, #16
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005aae:	0e1a      	lsrs	r2, r3, #24
 8005ab0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ab4:	3311      	adds	r3, #17
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005aba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005abe:	330b      	adds	r3, #11
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005ac4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ac8:	331c      	adds	r3, #28
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ad2:	331d      	adds	r3, #29
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005adc:	331e      	adds	r3, #30
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ae6:	331f      	adds	r3, #31
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005af0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005af8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff f8d6 	bl	8004cae <ld_clust>
 8005b02:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8005b06:	2100      	movs	r1, #0
 8005b08:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8005b0c:	f7ff f8fc 	bl	8004d08 <st_clust>
				dj.fs->wflag = 1;
 8005b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005b22:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d059      	beq.n	8005bde <f_open+0x33a>
					dw = dj.fs->winsect;
 8005b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b2e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b36:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005b3a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8005b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b42:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b4a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fdad 	bl	80046ae <remove_chain>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8005b5a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d13d      	bne.n	8005bde <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b66:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b6e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005b72:	3a01      	subs	r2, #1
 8005b74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b7c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b84:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe facc 	bl	8004126 <move_window>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005b94:	e023      	b.n	8005bde <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005b96:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11f      	bne.n	8005bde <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005b9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ba2:	330b      	adds	r3, #11
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <f_open+0x312>
					res = FR_NO_FILE;
 8005bae:	2304      	movs	r3, #4
 8005bb0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005bb4:	e013      	b.n	8005bde <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bba:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <f_open+0x33a>
 8005bc8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005bcc:	330b      	adds	r3, #11
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <f_open+0x33a>
						res = FR_DENIED;
 8005bd8:	2307      	movs	r3, #7
 8005bda:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8005bde:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d153      	bne.n	8005c8e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bea:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8005bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bfc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005c00:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005c04:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	f042 0220 	orr.w	r2, r2, #32
 8005c0e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c1c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c24:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8005c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c32:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005c3c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c44:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f107 0320 	add.w	r3, r7, #32
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f937 	bl	8003ed4 <inc_lock>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c6c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8005c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <f_open+0x3ea>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005c8e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d178      	bne.n	8005d88 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8005c96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c9a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005ca4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8005cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cc2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cca:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe ffed 	bl	8004cae <ld_clust>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cda:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005ce4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ce8:	331f      	adds	r3, #31
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	061a      	lsls	r2, r3, #24
 8005cee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cf2:	331e      	adds	r3, #30
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005cfe:	321d      	adds	r2, #29
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	0212      	lsls	r2, r2, #8
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005d0a:	321c      	adds	r2, #28
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d14:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8005d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d22:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8005d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d32:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d42:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d52:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d5e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8005d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d6c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d76:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005d88:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	; 0x28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff fcfc 	bl	80057ac <validate>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <f_write+0x2c>
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	e192      	b.n	80060e8 <f_write+0x352>
	if (fp->err)							/* Check error */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005dd2:	e189      	b.n	80060e8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005de2:	2307      	movs	r3, #7
 8005de4:	e180      	b.n	80060e8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	441a      	add	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f080 8158 	bcs.w	80060ac <f_write+0x316>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005e00:	e154      	b.n	80060ac <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 8114 	bne.w	800603a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e18:	0a5b      	lsrs	r3, r3, #9
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d151      	bne.n	8005ed8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d121      	bne.n	8005e90 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fc84 	bl	8004762 <create_chain>
 8005e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e5c:	e018      	b.n	8005e90 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fe fd13 	bl	800489c <clmt_clust>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24
 8005e78:	e00a      	b.n	8005e90 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe fc6a 	bl	8004762 <create_chain>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 810f 	beq.w	80060b6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d105      	bne.n	8005eaa <f_write+0x114>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e11e      	b.n	80060e8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d105      	bne.n	8005ebe <f_write+0x128>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e114      	b.n	80060e8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <f_write+0x142>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01d      	beq.n	8005f22 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005eec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f7fd fea5 	bl	8003c48 <disk_write>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0eb      	b.n	80060e8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fe f9d3 	bl	80042dc <clust2sect>
 8005f36:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d105      	bne.n	8005f4a <f_write+0x1b4>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005f46:	2302      	movs	r3, #2
 8005f48:	e0ce      	b.n	80060e8 <f_write+0x352>
			sect += csect;
 8005f4a:	7dbb      	ldrb	r3, [r7, #22]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0a5b      	lsrs	r3, r3, #9
 8005f56:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d048      	beq.n	8005ff0 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005f5e:	7dba      	ldrb	r2, [r7, #22]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005f6a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d908      	bls.n	8005f84 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f78:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	7dbb      	ldrb	r3, [r7, #22]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f8a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	f7fd fe58 	bl	8003c48 <disk_write>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e09e      	b.n	80060e8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d916      	bls.n	8005fe8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	025b      	lsls	r3, r3, #9
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fd fe77 	bl	8003cc4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	025b      	lsls	r3, r3, #9
 8005fec:	623b      	str	r3, [r7, #32]
				continue;
 8005fee:	e047      	b.n	8006080 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d01a      	beq.n	8006032 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006008:	429a      	cmp	r2, r3
 800600a:	d212      	bcs.n	8006032 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006012:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	2301      	movs	r3, #1
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	f7fd fdf4 	bl	8003c08 <disk_read>
 8006020:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800602e:	2301      	movs	r3, #1
 8006030:	e05a      	b.n	80060e8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006048:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d901      	bls.n	8006056 <f_write+0x2c0>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd fe2b 	bl	8003cc4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4413      	add	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	441a      	add	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f47f aea7 	bne.w	8005e02 <f_write+0x6c>
 80060b4:	e000      	b.n	80060b8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80060b6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d905      	bls.n	80060d4 <f_write+0x33e>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80060da:	f043 0320 	orr.w	r3, r3, #32
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3728      	adds	r7, #40	; 0x28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fb57 	bl	80057ac <validate>
 80060fe:	4603      	mov	r3, r0
 8006100:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 80a8 	bne.w	800625a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80a0 	beq.w	800625a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800612e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800613a:	2301      	movs	r3, #1
 800613c:	f7fd fd84 	bl	8003c48 <disk_write>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006146:	2301      	movs	r3, #1
 8006148:	e088      	b.n	800625c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006154:	b2da      	uxtb	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fd ffdb 	bl	8004126 <move_window>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d16f      	bne.n	800625a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006180:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	330b      	adds	r3, #11
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	330b      	adds	r3, #11
 800618c:	f042 0220 	orr.w	r2, r2, #32
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	331c      	adds	r3, #28
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	331d      	adds	r3, #29
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061bc:	0c1a      	lsrs	r2, r3, #16
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	331e      	adds	r3, #30
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061cc:	0e1a      	lsrs	r2, r3, #24
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	331f      	adds	r3, #31
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061dc:	4619      	mov	r1, r3
 80061de:	6938      	ldr	r0, [r7, #16]
 80061e0:	f7fe fd92 	bl	8004d08 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80061e4:	f7fc ff92 	bl	800310c <get_fattime>
 80061e8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3316      	adds	r3, #22
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3317      	adds	r3, #23
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	0c1a      	lsrs	r2, r3, #16
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3318      	adds	r3, #24
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0e1a      	lsrs	r2, r3, #24
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3319      	adds	r3, #25
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3312      	adds	r3, #18
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	3313      	adds	r3, #19
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006232:	f023 0320 	bic.w	r3, r3, #32
 8006236:	b2da      	uxtb	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd ff96 	bl	8004182 <sync_fs>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	2200      	movs	r2, #0
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe ffcf 	bl	800521c <find_volume>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800628a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 80af 	bne.w	80063f2 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062a0:	3b02      	subs	r3, #2
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d805      	bhi.n	80062b2 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e09f      	b.n	80063f2 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062b8:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80062be:	7efb      	ldrb	r3, [r7, #27]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d125      	bne.n	8006310 <f_getfree+0xac>
				clst = 2;
 80062c4:	2302      	movs	r3, #2
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80062c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ca:	69f8      	ldr	r0, [r7, #28]
 80062cc:	f7fe f827 	bl	800431e <get_fat>
 80062d0:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d103      	bne.n	80062e2 <f_getfree+0x7e>
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062e0:	e077      	b.n	80063d2 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d103      	bne.n	80062f0 <f_getfree+0x8c>
 80062e8:	2302      	movs	r3, #2
 80062ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062ee:	e070      	b.n	80063d2 <f_getfree+0x16e>
					if (stat == 0) n++;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <f_getfree+0x98>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	3301      	adds	r3, #1
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	3301      	adds	r3, #1
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630a:	429a      	cmp	r2, r3
 800630c:	d3dc      	bcc.n	80062c8 <f_getfree+0x64>
 800630e:	e060      	b.n	80063d2 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	2300      	movs	r3, #0
 8006326:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d112      	bne.n	8006354 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	62ba      	str	r2, [r7, #40]	; 0x28
 8006334:	4619      	mov	r1, r3
 8006336:	69f8      	ldr	r0, [r7, #28]
 8006338:	f7fd fef5 	bl	8004126 <move_window>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006342:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006346:	2b00      	cmp	r3, #0
 8006348:	d142      	bne.n	80063d0 <f_getfree+0x16c>
						p = fs->win.d8;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006354:	7efb      	ldrb	r3, [r7, #27]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d115      	bne.n	8006386 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	3301      	adds	r3, #1
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	b21a      	sxth	r2, r3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b21b      	sxth	r3, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	b21b      	sxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <f_getfree+0x114>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	3301      	adds	r3, #1
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	3302      	adds	r3, #2
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	3b02      	subs	r3, #2
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
 8006384:	e01d      	b.n	80063c2 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	3303      	adds	r3, #3
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	061a      	lsls	r2, r3, #24
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	3302      	adds	r3, #2
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	4313      	orrs	r3, r2
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	3201      	adds	r2, #1
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	0212      	lsls	r2, r2, #8
 80063a0:	4313      	orrs	r3, r2
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <f_getfree+0x152>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	3301      	adds	r3, #1
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	3304      	adds	r3, #4
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3b04      	subs	r3, #4
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	3b01      	subs	r3, #1
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ac      	bne.n	8006328 <f_getfree+0xc4>
 80063ce:	e000      	b.n	80063d2 <f_getfree+0x16e>
						if (res != FR_OK) break;
 80063d0:	bf00      	nop
			}
			fs->free_clust = n;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80063f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3738      	adds	r7, #56	; 0x38
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006416:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006418:	7a5b      	ldrb	r3, [r3, #9]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d831      	bhi.n	8006484 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006420:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006422:	7a5b      	ldrb	r3, [r3, #9]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 800642a:	2100      	movs	r1, #0
 800642c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006430:	7a5b      	ldrb	r3, [r3, #9]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	4a16      	ldr	r2, [pc, #88]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800643e:	4b14      	ldr	r3, [pc, #80]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006440:	7a5b      	ldrb	r3, [r3, #9]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006448:	4413      	add	r3, r2
 800644a:	79fa      	ldrb	r2, [r7, #7]
 800644c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 8006450:	7a5b      	ldrb	r3, [r3, #9]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	b2d1      	uxtb	r1, r2
 8006458:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <FATFS_LinkDriverEx+0x90>)
 800645a:	7251      	strb	r1, [r2, #9]
 800645c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800645e:	7dbb      	ldrb	r3, [r7, #22]
 8006460:	3330      	adds	r3, #48	; 0x30
 8006462:	b2da      	uxtb	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3301      	adds	r3, #1
 800646c:	223a      	movs	r2, #58	; 0x3a
 800646e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3302      	adds	r3, #2
 8006474:	222f      	movs	r2, #47	; 0x2f
 8006476:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3303      	adds	r3, #3
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	20000268 	.word	0x20000268

08006494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800649e:	2200      	movs	r2, #0
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ffac 	bl	8006400 <FATFS_LinkDriverEx>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <__errno>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <__errno+0x8>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20000024 	.word	0x20000024

080064c0 <__libc_init_array>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	2600      	movs	r6, #0
 80064c4:	4d0c      	ldr	r5, [pc, #48]	; (80064f8 <__libc_init_array+0x38>)
 80064c6:	4c0d      	ldr	r4, [pc, #52]	; (80064fc <__libc_init_array+0x3c>)
 80064c8:	1b64      	subs	r4, r4, r5
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	d109      	bne.n	80064e4 <__libc_init_array+0x24>
 80064d0:	f000 fcd6 	bl	8006e80 <_init>
 80064d4:	2600      	movs	r6, #0
 80064d6:	4d0a      	ldr	r5, [pc, #40]	; (8006500 <__libc_init_array+0x40>)
 80064d8:	4c0a      	ldr	r4, [pc, #40]	; (8006504 <__libc_init_array+0x44>)
 80064da:	1b64      	subs	r4, r4, r5
 80064dc:	10a4      	asrs	r4, r4, #2
 80064de:	42a6      	cmp	r6, r4
 80064e0:	d105      	bne.n	80064ee <__libc_init_array+0x2e>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e8:	4798      	blx	r3
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7ee      	b.n	80064cc <__libc_init_array+0xc>
 80064ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f2:	4798      	blx	r3
 80064f4:	3601      	adds	r6, #1
 80064f6:	e7f2      	b.n	80064de <__libc_init_array+0x1e>
 80064f8:	08007138 	.word	0x08007138
 80064fc:	08007138 	.word	0x08007138
 8006500:	08007138 	.word	0x08007138
 8006504:	0800713c 	.word	0x0800713c

08006508 <memset>:
 8006508:	4603      	mov	r3, r0
 800650a:	4402      	add	r2, r0
 800650c:	4293      	cmp	r3, r2
 800650e:	d100      	bne.n	8006512 <memset+0xa>
 8006510:	4770      	bx	lr
 8006512:	f803 1b01 	strb.w	r1, [r3], #1
 8006516:	e7f9      	b.n	800650c <memset+0x4>

08006518 <siprintf>:
 8006518:	b40e      	push	{r1, r2, r3}
 800651a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800651e:	b500      	push	{lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ab1d      	add	r3, sp, #116	; 0x74
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	9006      	str	r0, [sp, #24]
 8006528:	9107      	str	r1, [sp, #28]
 800652a:	9104      	str	r1, [sp, #16]
 800652c:	4808      	ldr	r0, [pc, #32]	; (8006550 <siprintf+0x38>)
 800652e:	4909      	ldr	r1, [pc, #36]	; (8006554 <siprintf+0x3c>)
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	a902      	add	r1, sp, #8
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	f000 f8a2 	bl	8006684 <_svfiprintf_r>
 8006540:	2200      	movs	r2, #0
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	b01c      	add	sp, #112	; 0x70
 8006548:	f85d eb04 	ldr.w	lr, [sp], #4
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr
 8006550:	20000024 	.word	0x20000024
 8006554:	ffff0208 	.word	0xffff0208

08006558 <_vsniprintf_r>:
 8006558:	b530      	push	{r4, r5, lr}
 800655a:	4614      	mov	r4, r2
 800655c:	2c00      	cmp	r4, #0
 800655e:	4605      	mov	r5, r0
 8006560:	461a      	mov	r2, r3
 8006562:	b09b      	sub	sp, #108	; 0x6c
 8006564:	da05      	bge.n	8006572 <_vsniprintf_r+0x1a>
 8006566:	238b      	movs	r3, #139	; 0x8b
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	b01b      	add	sp, #108	; 0x6c
 8006570:	bd30      	pop	{r4, r5, pc}
 8006572:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006576:	f8ad 300c 	strh.w	r3, [sp, #12]
 800657a:	bf0c      	ite	eq
 800657c:	4623      	moveq	r3, r4
 800657e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006582:	9302      	str	r3, [sp, #8]
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800658a:	9100      	str	r1, [sp, #0]
 800658c:	9104      	str	r1, [sp, #16]
 800658e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006592:	4669      	mov	r1, sp
 8006594:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006596:	f000 f875 	bl	8006684 <_svfiprintf_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	bfbc      	itt	lt
 800659e:	238b      	movlt	r3, #139	; 0x8b
 80065a0:	602b      	strlt	r3, [r5, #0]
 80065a2:	2c00      	cmp	r4, #0
 80065a4:	d0e3      	beq.n	800656e <_vsniprintf_r+0x16>
 80065a6:	2200      	movs	r2, #0
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e7df      	b.n	800656e <_vsniprintf_r+0x16>
	...

080065b0 <vsniprintf>:
 80065b0:	b507      	push	{r0, r1, r2, lr}
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	460a      	mov	r2, r1
 80065b8:	4601      	mov	r1, r0
 80065ba:	4803      	ldr	r0, [pc, #12]	; (80065c8 <vsniprintf+0x18>)
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	f7ff ffcb 	bl	8006558 <_vsniprintf_r>
 80065c2:	b003      	add	sp, #12
 80065c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80065c8:	20000024 	.word	0x20000024

080065cc <__ssputs_r>:
 80065cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	688e      	ldr	r6, [r1, #8]
 80065d2:	4682      	mov	sl, r0
 80065d4:	429e      	cmp	r6, r3
 80065d6:	460c      	mov	r4, r1
 80065d8:	4690      	mov	r8, r2
 80065da:	461f      	mov	r7, r3
 80065dc:	d838      	bhi.n	8006650 <__ssputs_r+0x84>
 80065de:	898a      	ldrh	r2, [r1, #12]
 80065e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065e4:	d032      	beq.n	800664c <__ssputs_r+0x80>
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	6909      	ldr	r1, [r1, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	eba5 0901 	sub.w	r9, r5, r1
 80065f0:	6965      	ldr	r5, [r4, #20]
 80065f2:	444b      	add	r3, r9
 80065f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065fc:	106d      	asrs	r5, r5, #1
 80065fe:	429d      	cmp	r5, r3
 8006600:	bf38      	it	cc
 8006602:	461d      	movcc	r5, r3
 8006604:	0553      	lsls	r3, r2, #21
 8006606:	d531      	bpl.n	800666c <__ssputs_r+0xa0>
 8006608:	4629      	mov	r1, r5
 800660a:	f000 fb6f 	bl	8006cec <_malloc_r>
 800660e:	4606      	mov	r6, r0
 8006610:	b950      	cbnz	r0, 8006628 <__ssputs_r+0x5c>
 8006612:	230c      	movs	r3, #12
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	f8ca 3000 	str.w	r3, [sl]
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	464a      	mov	r2, r9
 800662a:	6921      	ldr	r1, [r4, #16]
 800662c:	f000 face 	bl	8006bcc <memcpy>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	6126      	str	r6, [r4, #16]
 800663e:	444e      	add	r6, r9
 8006640:	6026      	str	r6, [r4, #0]
 8006642:	463e      	mov	r6, r7
 8006644:	6165      	str	r5, [r4, #20]
 8006646:	eba5 0509 	sub.w	r5, r5, r9
 800664a:	60a5      	str	r5, [r4, #8]
 800664c:	42be      	cmp	r6, r7
 800664e:	d900      	bls.n	8006652 <__ssputs_r+0x86>
 8006650:	463e      	mov	r6, r7
 8006652:	4632      	mov	r2, r6
 8006654:	4641      	mov	r1, r8
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	f000 fac6 	bl	8006be8 <memmove>
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	2000      	movs	r0, #0
 8006660:	1b9b      	subs	r3, r3, r6
 8006662:	60a3      	str	r3, [r4, #8]
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	4433      	add	r3, r6
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	e7db      	b.n	8006624 <__ssputs_r+0x58>
 800666c:	462a      	mov	r2, r5
 800666e:	f000 fbb1 	bl	8006dd4 <_realloc_r>
 8006672:	4606      	mov	r6, r0
 8006674:	2800      	cmp	r0, #0
 8006676:	d1e1      	bne.n	800663c <__ssputs_r+0x70>
 8006678:	4650      	mov	r0, sl
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	f000 face 	bl	8006c1c <_free_r>
 8006680:	e7c7      	b.n	8006612 <__ssputs_r+0x46>
	...

08006684 <_svfiprintf_r>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4698      	mov	r8, r3
 800668a:	898b      	ldrh	r3, [r1, #12]
 800668c:	4607      	mov	r7, r0
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	460d      	mov	r5, r1
 8006692:	4614      	mov	r4, r2
 8006694:	b09d      	sub	sp, #116	; 0x74
 8006696:	d50e      	bpl.n	80066b6 <_svfiprintf_r+0x32>
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	b963      	cbnz	r3, 80066b6 <_svfiprintf_r+0x32>
 800669c:	2140      	movs	r1, #64	; 0x40
 800669e:	f000 fb25 	bl	8006cec <_malloc_r>
 80066a2:	6028      	str	r0, [r5, #0]
 80066a4:	6128      	str	r0, [r5, #16]
 80066a6:	b920      	cbnz	r0, 80066b2 <_svfiprintf_r+0x2e>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e0d1      	b.n	8006856 <_svfiprintf_r+0x1d2>
 80066b2:	2340      	movs	r3, #64	; 0x40
 80066b4:	616b      	str	r3, [r5, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	2320      	movs	r3, #32
 80066bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c0:	2330      	movs	r3, #48	; 0x30
 80066c2:	f04f 0901 	mov.w	r9, #1
 80066c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006870 <_svfiprintf_r+0x1ec>
 80066ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d2:	4623      	mov	r3, r4
 80066d4:	469a      	mov	sl, r3
 80066d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066da:	b10a      	cbz	r2, 80066e0 <_svfiprintf_r+0x5c>
 80066dc:	2a25      	cmp	r2, #37	; 0x25
 80066de:	d1f9      	bne.n	80066d4 <_svfiprintf_r+0x50>
 80066e0:	ebba 0b04 	subs.w	fp, sl, r4
 80066e4:	d00b      	beq.n	80066fe <_svfiprintf_r+0x7a>
 80066e6:	465b      	mov	r3, fp
 80066e8:	4622      	mov	r2, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff ff6d 	bl	80065cc <__ssputs_r>
 80066f2:	3001      	adds	r0, #1
 80066f4:	f000 80aa 	beq.w	800684c <_svfiprintf_r+0x1c8>
 80066f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066fa:	445a      	add	r2, fp
 80066fc:	9209      	str	r2, [sp, #36]	; 0x24
 80066fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a2 	beq.w	800684c <_svfiprintf_r+0x1c8>
 8006708:	2300      	movs	r3, #0
 800670a:	f04f 32ff 	mov.w	r2, #4294967295
 800670e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006712:	f10a 0a01 	add.w	sl, sl, #1
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	9307      	str	r3, [sp, #28]
 800671a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800671e:	931a      	str	r3, [sp, #104]	; 0x68
 8006720:	4654      	mov	r4, sl
 8006722:	2205      	movs	r2, #5
 8006724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006728:	4851      	ldr	r0, [pc, #324]	; (8006870 <_svfiprintf_r+0x1ec>)
 800672a:	f000 fa41 	bl	8006bb0 <memchr>
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	b9d8      	cbnz	r0, 800676a <_svfiprintf_r+0xe6>
 8006732:	06d0      	lsls	r0, r2, #27
 8006734:	bf44      	itt	mi
 8006736:	2320      	movmi	r3, #32
 8006738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800673c:	0711      	lsls	r1, r2, #28
 800673e:	bf44      	itt	mi
 8006740:	232b      	movmi	r3, #43	; 0x2b
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006746:	f89a 3000 	ldrb.w	r3, [sl]
 800674a:	2b2a      	cmp	r3, #42	; 0x2a
 800674c:	d015      	beq.n	800677a <_svfiprintf_r+0xf6>
 800674e:	4654      	mov	r4, sl
 8006750:	2000      	movs	r0, #0
 8006752:	f04f 0c0a 	mov.w	ip, #10
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	4621      	mov	r1, r4
 800675a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675e:	3b30      	subs	r3, #48	; 0x30
 8006760:	2b09      	cmp	r3, #9
 8006762:	d94e      	bls.n	8006802 <_svfiprintf_r+0x17e>
 8006764:	b1b0      	cbz	r0, 8006794 <_svfiprintf_r+0x110>
 8006766:	9207      	str	r2, [sp, #28]
 8006768:	e014      	b.n	8006794 <_svfiprintf_r+0x110>
 800676a:	eba0 0308 	sub.w	r3, r0, r8
 800676e:	fa09 f303 	lsl.w	r3, r9, r3
 8006772:	4313      	orrs	r3, r2
 8006774:	46a2      	mov	sl, r4
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	e7d2      	b.n	8006720 <_svfiprintf_r+0x9c>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	1d19      	adds	r1, r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	9103      	str	r1, [sp, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfbb      	ittet	lt
 8006786:	425b      	neglt	r3, r3
 8006788:	f042 0202 	orrlt.w	r2, r2, #2
 800678c:	9307      	strge	r3, [sp, #28]
 800678e:	9307      	strlt	r3, [sp, #28]
 8006790:	bfb8      	it	lt
 8006792:	9204      	strlt	r2, [sp, #16]
 8006794:	7823      	ldrb	r3, [r4, #0]
 8006796:	2b2e      	cmp	r3, #46	; 0x2e
 8006798:	d10c      	bne.n	80067b4 <_svfiprintf_r+0x130>
 800679a:	7863      	ldrb	r3, [r4, #1]
 800679c:	2b2a      	cmp	r3, #42	; 0x2a
 800679e:	d135      	bne.n	800680c <_svfiprintf_r+0x188>
 80067a0:	9b03      	ldr	r3, [sp, #12]
 80067a2:	3402      	adds	r4, #2
 80067a4:	1d1a      	adds	r2, r3, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	9203      	str	r2, [sp, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfb8      	it	lt
 80067ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006874 <_svfiprintf_r+0x1f0>
 80067b8:	2203      	movs	r2, #3
 80067ba:	4650      	mov	r0, sl
 80067bc:	7821      	ldrb	r1, [r4, #0]
 80067be:	f000 f9f7 	bl	8006bb0 <memchr>
 80067c2:	b140      	cbz	r0, 80067d6 <_svfiprintf_r+0x152>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	eba0 000a 	sub.w	r0, r0, sl
 80067ca:	fa03 f000 	lsl.w	r0, r3, r0
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	3401      	adds	r4, #1
 80067d2:	4303      	orrs	r3, r0
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067da:	2206      	movs	r2, #6
 80067dc:	4826      	ldr	r0, [pc, #152]	; (8006878 <_svfiprintf_r+0x1f4>)
 80067de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e2:	f000 f9e5 	bl	8006bb0 <memchr>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d038      	beq.n	800685c <_svfiprintf_r+0x1d8>
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <_svfiprintf_r+0x1f8>)
 80067ec:	bb1b      	cbnz	r3, 8006836 <_svfiprintf_r+0x1b2>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	3307      	adds	r3, #7
 80067f2:	f023 0307 	bic.w	r3, r3, #7
 80067f6:	3308      	adds	r3, #8
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	4433      	add	r3, r6
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	e767      	b.n	80066d2 <_svfiprintf_r+0x4e>
 8006802:	460c      	mov	r4, r1
 8006804:	2001      	movs	r0, #1
 8006806:	fb0c 3202 	mla	r2, ip, r2, r3
 800680a:	e7a5      	b.n	8006758 <_svfiprintf_r+0xd4>
 800680c:	2300      	movs	r3, #0
 800680e:	f04f 0c0a 	mov.w	ip, #10
 8006812:	4619      	mov	r1, r3
 8006814:	3401      	adds	r4, #1
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	4620      	mov	r0, r4
 800681a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681e:	3a30      	subs	r2, #48	; 0x30
 8006820:	2a09      	cmp	r2, #9
 8006822:	d903      	bls.n	800682c <_svfiprintf_r+0x1a8>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0c5      	beq.n	80067b4 <_svfiprintf_r+0x130>
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	e7c3      	b.n	80067b4 <_svfiprintf_r+0x130>
 800682c:	4604      	mov	r4, r0
 800682e:	2301      	movs	r3, #1
 8006830:	fb0c 2101 	mla	r1, ip, r1, r2
 8006834:	e7f0      	b.n	8006818 <_svfiprintf_r+0x194>
 8006836:	ab03      	add	r3, sp, #12
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	462a      	mov	r2, r5
 800683c:	4638      	mov	r0, r7
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <_svfiprintf_r+0x1fc>)
 8006840:	a904      	add	r1, sp, #16
 8006842:	f3af 8000 	nop.w
 8006846:	1c42      	adds	r2, r0, #1
 8006848:	4606      	mov	r6, r0
 800684a:	d1d6      	bne.n	80067fa <_svfiprintf_r+0x176>
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	065b      	lsls	r3, r3, #25
 8006850:	f53f af2c 	bmi.w	80066ac <_svfiprintf_r+0x28>
 8006854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006856:	b01d      	add	sp, #116	; 0x74
 8006858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685c:	ab03      	add	r3, sp, #12
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	462a      	mov	r2, r5
 8006862:	4638      	mov	r0, r7
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <_svfiprintf_r+0x1fc>)
 8006866:	a904      	add	r1, sp, #16
 8006868:	f000 f87c 	bl	8006964 <_printf_i>
 800686c:	e7eb      	b.n	8006846 <_svfiprintf_r+0x1c2>
 800686e:	bf00      	nop
 8006870:	08007104 	.word	0x08007104
 8006874:	0800710a 	.word	0x0800710a
 8006878:	0800710e 	.word	0x0800710e
 800687c:	00000000 	.word	0x00000000
 8006880:	080065cd 	.word	0x080065cd

08006884 <_printf_common>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	4616      	mov	r6, r2
 800688a:	4699      	mov	r9, r3
 800688c:	688a      	ldr	r2, [r1, #8]
 800688e:	690b      	ldr	r3, [r1, #16]
 8006890:	4607      	mov	r7, r0
 8006892:	4293      	cmp	r3, r2
 8006894:	bfb8      	it	lt
 8006896:	4613      	movlt	r3, r2
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800689e:	460c      	mov	r4, r1
 80068a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a4:	b10a      	cbz	r2, 80068aa <_printf_common+0x26>
 80068a6:	3301      	adds	r3, #1
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	0699      	lsls	r1, r3, #26
 80068ae:	bf42      	ittt	mi
 80068b0:	6833      	ldrmi	r3, [r6, #0]
 80068b2:	3302      	addmi	r3, #2
 80068b4:	6033      	strmi	r3, [r6, #0]
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	f015 0506 	ands.w	r5, r5, #6
 80068bc:	d106      	bne.n	80068cc <_printf_common+0x48>
 80068be:	f104 0a19 	add.w	sl, r4, #25
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	6832      	ldr	r2, [r6, #0]
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dc28      	bgt.n	800691e <_printf_common+0x9a>
 80068cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d0:	1e13      	subs	r3, r2, #0
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	bf18      	it	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	0692      	lsls	r2, r2, #26
 80068da:	d42d      	bmi.n	8006938 <_printf_common+0xb4>
 80068dc:	4649      	mov	r1, r9
 80068de:	4638      	mov	r0, r7
 80068e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068e4:	47c0      	blx	r8
 80068e6:	3001      	adds	r0, #1
 80068e8:	d020      	beq.n	800692c <_printf_common+0xa8>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	68e5      	ldr	r5, [r4, #12]
 80068ee:	f003 0306 	and.w	r3, r3, #6
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	bf18      	it	ne
 80068f6:	2500      	movne	r5, #0
 80068f8:	6832      	ldr	r2, [r6, #0]
 80068fa:	f04f 0600 	mov.w	r6, #0
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	bf08      	it	eq
 8006902:	1aad      	subeq	r5, r5, r2
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	bf08      	it	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	4293      	cmp	r3, r2
 800690e:	bfc4      	itt	gt
 8006910:	1a9b      	subgt	r3, r3, r2
 8006912:	18ed      	addgt	r5, r5, r3
 8006914:	341a      	adds	r4, #26
 8006916:	42b5      	cmp	r5, r6
 8006918:	d11a      	bne.n	8006950 <_printf_common+0xcc>
 800691a:	2000      	movs	r0, #0
 800691c:	e008      	b.n	8006930 <_printf_common+0xac>
 800691e:	2301      	movs	r3, #1
 8006920:	4652      	mov	r2, sl
 8006922:	4649      	mov	r1, r9
 8006924:	4638      	mov	r0, r7
 8006926:	47c0      	blx	r8
 8006928:	3001      	adds	r0, #1
 800692a:	d103      	bne.n	8006934 <_printf_common+0xb0>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006934:	3501      	adds	r5, #1
 8006936:	e7c4      	b.n	80068c2 <_printf_common+0x3e>
 8006938:	2030      	movs	r0, #48	; 0x30
 800693a:	18e1      	adds	r1, r4, r3
 800693c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006946:	4422      	add	r2, r4
 8006948:	3302      	adds	r3, #2
 800694a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800694e:	e7c5      	b.n	80068dc <_printf_common+0x58>
 8006950:	2301      	movs	r3, #1
 8006952:	4622      	mov	r2, r4
 8006954:	4649      	mov	r1, r9
 8006956:	4638      	mov	r0, r7
 8006958:	47c0      	blx	r8
 800695a:	3001      	adds	r0, #1
 800695c:	d0e6      	beq.n	800692c <_printf_common+0xa8>
 800695e:	3601      	adds	r6, #1
 8006960:	e7d9      	b.n	8006916 <_printf_common+0x92>
	...

08006964 <_printf_i>:
 8006964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	7e0f      	ldrb	r7, [r1, #24]
 800696a:	4691      	mov	r9, r2
 800696c:	2f78      	cmp	r7, #120	; 0x78
 800696e:	4680      	mov	r8, r0
 8006970:	460c      	mov	r4, r1
 8006972:	469a      	mov	sl, r3
 8006974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800697a:	d807      	bhi.n	800698c <_printf_i+0x28>
 800697c:	2f62      	cmp	r7, #98	; 0x62
 800697e:	d80a      	bhi.n	8006996 <_printf_i+0x32>
 8006980:	2f00      	cmp	r7, #0
 8006982:	f000 80d9 	beq.w	8006b38 <_printf_i+0x1d4>
 8006986:	2f58      	cmp	r7, #88	; 0x58
 8006988:	f000 80a4 	beq.w	8006ad4 <_printf_i+0x170>
 800698c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006994:	e03a      	b.n	8006a0c <_printf_i+0xa8>
 8006996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800699a:	2b15      	cmp	r3, #21
 800699c:	d8f6      	bhi.n	800698c <_printf_i+0x28>
 800699e:	a101      	add	r1, pc, #4	; (adr r1, 80069a4 <_printf_i+0x40>)
 80069a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	0800698d 	.word	0x0800698d
 80069b0:	0800698d 	.word	0x0800698d
 80069b4:	0800698d 	.word	0x0800698d
 80069b8:	0800698d 	.word	0x0800698d
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	0800698d 	.word	0x0800698d
 80069c4:	0800698d 	.word	0x0800698d
 80069c8:	0800698d 	.word	0x0800698d
 80069cc:	0800698d 	.word	0x0800698d
 80069d0:	08006b1f 	.word	0x08006b1f
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006b01 	.word	0x08006b01
 80069dc:	0800698d 	.word	0x0800698d
 80069e0:	0800698d 	.word	0x0800698d
 80069e4:	08006b41 	.word	0x08006b41
 80069e8:	0800698d 	.word	0x0800698d
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	0800698d 	.word	0x0800698d
 80069f4:	0800698d 	.word	0x0800698d
 80069f8:	08006b09 	.word	0x08006b09
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	602a      	str	r2, [r5, #0]
 8006a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0a4      	b.n	8006b5a <_printf_i+0x1f6>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	6829      	ldr	r1, [r5, #0]
 8006a14:	0606      	lsls	r6, r0, #24
 8006a16:	f101 0304 	add.w	r3, r1, #4
 8006a1a:	d50a      	bpl.n	8006a32 <_printf_i+0xce>
 8006a1c:	680e      	ldr	r6, [r1, #0]
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	da03      	bge.n	8006a2c <_printf_i+0xc8>
 8006a24:	232d      	movs	r3, #45	; 0x2d
 8006a26:	4276      	negs	r6, r6
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2c:	230a      	movs	r3, #10
 8006a2e:	485e      	ldr	r0, [pc, #376]	; (8006ba8 <_printf_i+0x244>)
 8006a30:	e019      	b.n	8006a66 <_printf_i+0x102>
 8006a32:	680e      	ldr	r6, [r1, #0]
 8006a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	bf18      	it	ne
 8006a3c:	b236      	sxthne	r6, r6
 8006a3e:	e7ef      	b.n	8006a20 <_printf_i+0xbc>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	1d19      	adds	r1, r3, #4
 8006a46:	6029      	str	r1, [r5, #0]
 8006a48:	0601      	lsls	r1, r0, #24
 8006a4a:	d501      	bpl.n	8006a50 <_printf_i+0xec>
 8006a4c:	681e      	ldr	r6, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <_printf_i+0xf2>
 8006a50:	0646      	lsls	r6, r0, #25
 8006a52:	d5fb      	bpl.n	8006a4c <_printf_i+0xe8>
 8006a54:	881e      	ldrh	r6, [r3, #0]
 8006a56:	2f6f      	cmp	r7, #111	; 0x6f
 8006a58:	bf0c      	ite	eq
 8006a5a:	2308      	moveq	r3, #8
 8006a5c:	230a      	movne	r3, #10
 8006a5e:	4852      	ldr	r0, [pc, #328]	; (8006ba8 <_printf_i+0x244>)
 8006a60:	2100      	movs	r1, #0
 8006a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a66:	6865      	ldr	r5, [r4, #4]
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	bfa8      	it	ge
 8006a6c:	6821      	ldrge	r1, [r4, #0]
 8006a6e:	60a5      	str	r5, [r4, #8]
 8006a70:	bfa4      	itt	ge
 8006a72:	f021 0104 	bicge.w	r1, r1, #4
 8006a76:	6021      	strge	r1, [r4, #0]
 8006a78:	b90e      	cbnz	r6, 8006a7e <_printf_i+0x11a>
 8006a7a:	2d00      	cmp	r5, #0
 8006a7c:	d04d      	beq.n	8006b1a <_printf_i+0x1b6>
 8006a7e:	4615      	mov	r5, r2
 8006a80:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a84:	fb03 6711 	mls	r7, r3, r1, r6
 8006a88:	5dc7      	ldrb	r7, [r0, r7]
 8006a8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a8e:	4637      	mov	r7, r6
 8006a90:	42bb      	cmp	r3, r7
 8006a92:	460e      	mov	r6, r1
 8006a94:	d9f4      	bls.n	8006a80 <_printf_i+0x11c>
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d10b      	bne.n	8006ab2 <_printf_i+0x14e>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	07de      	lsls	r6, r3, #31
 8006a9e:	d508      	bpl.n	8006ab2 <_printf_i+0x14e>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	6861      	ldr	r1, [r4, #4]
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	bfde      	ittt	le
 8006aa8:	2330      	movle	r3, #48	; 0x30
 8006aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ab2:	1b52      	subs	r2, r2, r5
 8006ab4:	6122      	str	r2, [r4, #16]
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4640      	mov	r0, r8
 8006abc:	f8cd a000 	str.w	sl, [sp]
 8006ac0:	aa03      	add	r2, sp, #12
 8006ac2:	f7ff fedf 	bl	8006884 <_printf_common>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d14c      	bne.n	8006b64 <_printf_i+0x200>
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	b004      	add	sp, #16
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	4834      	ldr	r0, [pc, #208]	; (8006ba8 <_printf_i+0x244>)
 8006ad6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ada:	6829      	ldr	r1, [r5, #0]
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae2:	6029      	str	r1, [r5, #0]
 8006ae4:	061d      	lsls	r5, r3, #24
 8006ae6:	d514      	bpl.n	8006b12 <_printf_i+0x1ae>
 8006ae8:	07df      	lsls	r7, r3, #31
 8006aea:	bf44      	itt	mi
 8006aec:	f043 0320 	orrmi.w	r3, r3, #32
 8006af0:	6023      	strmi	r3, [r4, #0]
 8006af2:	b91e      	cbnz	r6, 8006afc <_printf_i+0x198>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	f023 0320 	bic.w	r3, r3, #32
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	2310      	movs	r3, #16
 8006afe:	e7af      	b.n	8006a60 <_printf_i+0xfc>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	f043 0320 	orr.w	r3, r3, #32
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	2378      	movs	r3, #120	; 0x78
 8006b0a:	4828      	ldr	r0, [pc, #160]	; (8006bac <_printf_i+0x248>)
 8006b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b10:	e7e3      	b.n	8006ada <_printf_i+0x176>
 8006b12:	0659      	lsls	r1, r3, #25
 8006b14:	bf48      	it	mi
 8006b16:	b2b6      	uxthmi	r6, r6
 8006b18:	e7e6      	b.n	8006ae8 <_printf_i+0x184>
 8006b1a:	4615      	mov	r5, r2
 8006b1c:	e7bb      	b.n	8006a96 <_printf_i+0x132>
 8006b1e:	682b      	ldr	r3, [r5, #0]
 8006b20:	6826      	ldr	r6, [r4, #0]
 8006b22:	1d18      	adds	r0, r3, #4
 8006b24:	6961      	ldr	r1, [r4, #20]
 8006b26:	6028      	str	r0, [r5, #0]
 8006b28:	0635      	lsls	r5, r6, #24
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	d501      	bpl.n	8006b32 <_printf_i+0x1ce>
 8006b2e:	6019      	str	r1, [r3, #0]
 8006b30:	e002      	b.n	8006b38 <_printf_i+0x1d4>
 8006b32:	0670      	lsls	r0, r6, #25
 8006b34:	d5fb      	bpl.n	8006b2e <_printf_i+0x1ca>
 8006b36:	8019      	strh	r1, [r3, #0]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4615      	mov	r5, r2
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	e7ba      	b.n	8006ab6 <_printf_i+0x152>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	2100      	movs	r1, #0
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	681d      	ldr	r5, [r3, #0]
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 f82f 	bl	8006bb0 <memchr>
 8006b52:	b108      	cbz	r0, 8006b58 <_printf_i+0x1f4>
 8006b54:	1b40      	subs	r0, r0, r5
 8006b56:	6060      	str	r0, [r4, #4]
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	6123      	str	r3, [r4, #16]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b62:	e7a8      	b.n	8006ab6 <_printf_i+0x152>
 8006b64:	462a      	mov	r2, r5
 8006b66:	4649      	mov	r1, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	47d0      	blx	sl
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d0ab      	beq.n	8006aca <_printf_i+0x166>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	079b      	lsls	r3, r3, #30
 8006b76:	d413      	bmi.n	8006ba0 <_printf_i+0x23c>
 8006b78:	68e0      	ldr	r0, [r4, #12]
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	4298      	cmp	r0, r3
 8006b7e:	bfb8      	it	lt
 8006b80:	4618      	movlt	r0, r3
 8006b82:	e7a4      	b.n	8006ace <_printf_i+0x16a>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4632      	mov	r2, r6
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	47d0      	blx	sl
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d09b      	beq.n	8006aca <_printf_i+0x166>
 8006b92:	3501      	adds	r5, #1
 8006b94:	68e3      	ldr	r3, [r4, #12]
 8006b96:	9903      	ldr	r1, [sp, #12]
 8006b98:	1a5b      	subs	r3, r3, r1
 8006b9a:	42ab      	cmp	r3, r5
 8006b9c:	dcf2      	bgt.n	8006b84 <_printf_i+0x220>
 8006b9e:	e7eb      	b.n	8006b78 <_printf_i+0x214>
 8006ba0:	2500      	movs	r5, #0
 8006ba2:	f104 0619 	add.w	r6, r4, #25
 8006ba6:	e7f5      	b.n	8006b94 <_printf_i+0x230>
 8006ba8:	08007115 	.word	0x08007115
 8006bac:	08007126 	.word	0x08007126

08006bb0 <memchr>:
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	b2c9      	uxtb	r1, r1
 8006bb6:	4402      	add	r2, r0
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	d101      	bne.n	8006bc2 <memchr+0x12>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e003      	b.n	8006bca <memchr+0x1a>
 8006bc2:	7804      	ldrb	r4, [r0, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	428c      	cmp	r4, r1
 8006bc8:	d1f6      	bne.n	8006bb8 <memchr+0x8>
 8006bca:	bd10      	pop	{r4, pc}

08006bcc <memcpy>:
 8006bcc:	440a      	add	r2, r1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd4:	d100      	bne.n	8006bd8 <memcpy+0xc>
 8006bd6:	4770      	bx	lr
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bde:	4291      	cmp	r1, r2
 8006be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be4:	d1f9      	bne.n	8006bda <memcpy+0xe>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <memmove>:
 8006be8:	4288      	cmp	r0, r1
 8006bea:	b510      	push	{r4, lr}
 8006bec:	eb01 0402 	add.w	r4, r1, r2
 8006bf0:	d902      	bls.n	8006bf8 <memmove+0x10>
 8006bf2:	4284      	cmp	r4, r0
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	d807      	bhi.n	8006c08 <memmove+0x20>
 8006bf8:	1e43      	subs	r3, r0, #1
 8006bfa:	42a1      	cmp	r1, r4
 8006bfc:	d008      	beq.n	8006c10 <memmove+0x28>
 8006bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c06:	e7f8      	b.n	8006bfa <memmove+0x12>
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4402      	add	r2, r0
 8006c0c:	428a      	cmp	r2, r1
 8006c0e:	d100      	bne.n	8006c12 <memmove+0x2a>
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1a:	e7f7      	b.n	8006c0c <memmove+0x24>

08006c1c <_free_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4605      	mov	r5, r0
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d040      	beq.n	8006ca6 <_free_r+0x8a>
 8006c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c28:	1f0c      	subs	r4, r1, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfb8      	it	lt
 8006c2e:	18e4      	addlt	r4, r4, r3
 8006c30:	f000 f910 	bl	8006e54 <__malloc_lock>
 8006c34:	4a1c      	ldr	r2, [pc, #112]	; (8006ca8 <_free_r+0x8c>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	b933      	cbnz	r3, 8006c48 <_free_r+0x2c>
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	6014      	str	r4, [r2, #0]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c44:	f000 b90c 	b.w	8006e60 <__malloc_unlock>
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	d908      	bls.n	8006c5e <_free_r+0x42>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf01      	itttt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	e7ed      	b.n	8006c3a <_free_r+0x1e>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b10b      	cbz	r3, 8006c68 <_free_r+0x4c>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d9fa      	bls.n	8006c5e <_free_r+0x42>
 8006c68:	6811      	ldr	r1, [r2, #0]
 8006c6a:	1850      	adds	r0, r2, r1
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	d10b      	bne.n	8006c88 <_free_r+0x6c>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	4401      	add	r1, r0
 8006c74:	1850      	adds	r0, r2, r1
 8006c76:	4283      	cmp	r3, r0
 8006c78:	6011      	str	r1, [r2, #0]
 8006c7a:	d1e0      	bne.n	8006c3e <_free_r+0x22>
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4401      	add	r1, r0
 8006c82:	6011      	str	r1, [r2, #0]
 8006c84:	6053      	str	r3, [r2, #4]
 8006c86:	e7da      	b.n	8006c3e <_free_r+0x22>
 8006c88:	d902      	bls.n	8006c90 <_free_r+0x74>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	e7d6      	b.n	8006c3e <_free_r+0x22>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	1821      	adds	r1, r4, r0
 8006c94:	428b      	cmp	r3, r1
 8006c96:	bf01      	itttt	eq
 8006c98:	6819      	ldreq	r1, [r3, #0]
 8006c9a:	685b      	ldreq	r3, [r3, #4]
 8006c9c:	1809      	addeq	r1, r1, r0
 8006c9e:	6021      	streq	r1, [r4, #0]
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	6054      	str	r4, [r2, #4]
 8006ca4:	e7cb      	b.n	8006c3e <_free_r+0x22>
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000274 	.word	0x20000274

08006cac <sbrk_aligned>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4e0e      	ldr	r6, [pc, #56]	; (8006ce8 <sbrk_aligned+0x3c>)
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	6831      	ldr	r1, [r6, #0]
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	b911      	cbnz	r1, 8006cbe <sbrk_aligned+0x12>
 8006cb8:	f000 f8bc 	bl	8006e34 <_sbrk_r>
 8006cbc:	6030      	str	r0, [r6, #0]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 f8b7 	bl	8006e34 <_sbrk_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	d00a      	beq.n	8006ce0 <sbrk_aligned+0x34>
 8006cca:	1cc4      	adds	r4, r0, #3
 8006ccc:	f024 0403 	bic.w	r4, r4, #3
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d007      	beq.n	8006ce4 <sbrk_aligned+0x38>
 8006cd4:	1a21      	subs	r1, r4, r0
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 f8ac 	bl	8006e34 <_sbrk_r>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d101      	bne.n	8006ce4 <sbrk_aligned+0x38>
 8006ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	20000278 	.word	0x20000278

08006cec <_malloc_r>:
 8006cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf0:	1ccd      	adds	r5, r1, #3
 8006cf2:	f025 0503 	bic.w	r5, r5, #3
 8006cf6:	3508      	adds	r5, #8
 8006cf8:	2d0c      	cmp	r5, #12
 8006cfa:	bf38      	it	cc
 8006cfc:	250c      	movcc	r5, #12
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	4607      	mov	r7, r0
 8006d02:	db01      	blt.n	8006d08 <_malloc_r+0x1c>
 8006d04:	42a9      	cmp	r1, r5
 8006d06:	d905      	bls.n	8006d14 <_malloc_r+0x28>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4630      	mov	r0, r6
 8006d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d14:	4e2e      	ldr	r6, [pc, #184]	; (8006dd0 <_malloc_r+0xe4>)
 8006d16:	f000 f89d 	bl	8006e54 <__malloc_lock>
 8006d1a:	6833      	ldr	r3, [r6, #0]
 8006d1c:	461c      	mov	r4, r3
 8006d1e:	bb34      	cbnz	r4, 8006d6e <_malloc_r+0x82>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4638      	mov	r0, r7
 8006d24:	f7ff ffc2 	bl	8006cac <sbrk_aligned>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	d14d      	bne.n	8006dca <_malloc_r+0xde>
 8006d2e:	6834      	ldr	r4, [r6, #0]
 8006d30:	4626      	mov	r6, r4
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d140      	bne.n	8006db8 <_malloc_r+0xcc>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	eb04 0803 	add.w	r8, r4, r3
 8006d40:	f000 f878 	bl	8006e34 <_sbrk_r>
 8006d44:	4580      	cmp	r8, r0
 8006d46:	d13a      	bne.n	8006dbe <_malloc_r+0xd2>
 8006d48:	6821      	ldr	r1, [r4, #0]
 8006d4a:	3503      	adds	r5, #3
 8006d4c:	1a6d      	subs	r5, r5, r1
 8006d4e:	f025 0503 	bic.w	r5, r5, #3
 8006d52:	3508      	adds	r5, #8
 8006d54:	2d0c      	cmp	r5, #12
 8006d56:	bf38      	it	cc
 8006d58:	250c      	movcc	r5, #12
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	f7ff ffa5 	bl	8006cac <sbrk_aligned>
 8006d62:	3001      	adds	r0, #1
 8006d64:	d02b      	beq.n	8006dbe <_malloc_r+0xd2>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	442b      	add	r3, r5
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	e00e      	b.n	8006d8c <_malloc_r+0xa0>
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	1b52      	subs	r2, r2, r5
 8006d72:	d41e      	bmi.n	8006db2 <_malloc_r+0xc6>
 8006d74:	2a0b      	cmp	r2, #11
 8006d76:	d916      	bls.n	8006da6 <_malloc_r+0xba>
 8006d78:	1961      	adds	r1, r4, r5
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	6025      	str	r5, [r4, #0]
 8006d7e:	bf18      	it	ne
 8006d80:	6059      	strne	r1, [r3, #4]
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	bf08      	it	eq
 8006d86:	6031      	streq	r1, [r6, #0]
 8006d88:	5162      	str	r2, [r4, r5]
 8006d8a:	604b      	str	r3, [r1, #4]
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f104 060b 	add.w	r6, r4, #11
 8006d92:	f000 f865 	bl	8006e60 <__malloc_unlock>
 8006d96:	f026 0607 	bic.w	r6, r6, #7
 8006d9a:	1d23      	adds	r3, r4, #4
 8006d9c:	1af2      	subs	r2, r6, r3
 8006d9e:	d0b6      	beq.n	8006d0e <_malloc_r+0x22>
 8006da0:	1b9b      	subs	r3, r3, r6
 8006da2:	50a3      	str	r3, [r4, r2]
 8006da4:	e7b3      	b.n	8006d0e <_malloc_r+0x22>
 8006da6:	6862      	ldr	r2, [r4, #4]
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	bf0c      	ite	eq
 8006dac:	6032      	streq	r2, [r6, #0]
 8006dae:	605a      	strne	r2, [r3, #4]
 8006db0:	e7ec      	b.n	8006d8c <_malloc_r+0xa0>
 8006db2:	4623      	mov	r3, r4
 8006db4:	6864      	ldr	r4, [r4, #4]
 8006db6:	e7b2      	b.n	8006d1e <_malloc_r+0x32>
 8006db8:	4634      	mov	r4, r6
 8006dba:	6876      	ldr	r6, [r6, #4]
 8006dbc:	e7b9      	b.n	8006d32 <_malloc_r+0x46>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	f000 f84c 	bl	8006e60 <__malloc_unlock>
 8006dc8:	e7a1      	b.n	8006d0e <_malloc_r+0x22>
 8006dca:	6025      	str	r5, [r4, #0]
 8006dcc:	e7de      	b.n	8006d8c <_malloc_r+0xa0>
 8006dce:	bf00      	nop
 8006dd0:	20000274 	.word	0x20000274

08006dd4 <_realloc_r>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	4680      	mov	r8, r0
 8006dda:	4614      	mov	r4, r2
 8006ddc:	460e      	mov	r6, r1
 8006dde:	b921      	cbnz	r1, 8006dea <_realloc_r+0x16>
 8006de0:	4611      	mov	r1, r2
 8006de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de6:	f7ff bf81 	b.w	8006cec <_malloc_r>
 8006dea:	b92a      	cbnz	r2, 8006df8 <_realloc_r+0x24>
 8006dec:	f7ff ff16 	bl	8006c1c <_free_r>
 8006df0:	4625      	mov	r5, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	f000 f838 	bl	8006e6c <_malloc_usable_size_r>
 8006dfc:	4284      	cmp	r4, r0
 8006dfe:	4607      	mov	r7, r0
 8006e00:	d802      	bhi.n	8006e08 <_realloc_r+0x34>
 8006e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e06:	d812      	bhi.n	8006e2e <_realloc_r+0x5a>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff ff6e 	bl	8006cec <_malloc_r>
 8006e10:	4605      	mov	r5, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0ed      	beq.n	8006df2 <_realloc_r+0x1e>
 8006e16:	42bc      	cmp	r4, r7
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	bf28      	it	cs
 8006e1e:	463a      	movcs	r2, r7
 8006e20:	f7ff fed4 	bl	8006bcc <memcpy>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4640      	mov	r0, r8
 8006e28:	f7ff fef8 	bl	8006c1c <_free_r>
 8006e2c:	e7e1      	b.n	8006df2 <_realloc_r+0x1e>
 8006e2e:	4635      	mov	r5, r6
 8006e30:	e7df      	b.n	8006df2 <_realloc_r+0x1e>
	...

08006e34 <_sbrk_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	2300      	movs	r3, #0
 8006e38:	4d05      	ldr	r5, [pc, #20]	; (8006e50 <_sbrk_r+0x1c>)
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	f7fa f90c 	bl	800105c <_sbrk>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_sbrk_r+0x1a>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_sbrk_r+0x1a>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	2000027c 	.word	0x2000027c

08006e54 <__malloc_lock>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__malloc_lock+0x8>)
 8006e56:	f000 b811 	b.w	8006e7c <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000280 	.word	0x20000280

08006e60 <__malloc_unlock>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__malloc_unlock+0x8>)
 8006e62:	f000 b80c 	b.w	8006e7e <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	20000280 	.word	0x20000280

08006e6c <_malloc_usable_size_r>:
 8006e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e70:	1f18      	subs	r0, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	bfbc      	itt	lt
 8006e76:	580b      	ldrlt	r3, [r1, r0]
 8006e78:	18c0      	addlt	r0, r0, r3
 8006e7a:	4770      	bx	lr

08006e7c <__retarget_lock_acquire_recursive>:
 8006e7c:	4770      	bx	lr

08006e7e <__retarget_lock_release_recursive>:
 8006e7e:	4770      	bx	lr

08006e80 <_init>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr

08006e8c <_fini>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr
